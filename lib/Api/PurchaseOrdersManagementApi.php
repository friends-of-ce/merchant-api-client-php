<?php
/**
 * PurchaseOrdersManagementApi
 * PHP version 7.4
 *
 * @category Class
 * @package  FriendsOfCE\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.14.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FriendsOfCE\Merchant\ApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use FriendsOfCE\Merchant\ApiClient\ApiException;
use FriendsOfCE\Merchant\ApiClient\Configuration;
use FriendsOfCE\Merchant\ApiClient\HeaderSelector;
use FriendsOfCE\Merchant\ApiClient\ObjectSerializer;

/**
 * PurchaseOrdersManagementApi Class Doc Comment
 *
 * @category Class
 * @package  FriendsOfCE\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PurchaseOrdersManagementApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'purchaseOrdersManagementAcknowledge' => [
            'application/json-patch+json',
            'application/json',
            'application/*+json',
        ],
        'purchaseOrdersManagementCreateInvoice' => [
            'application/json-patch+json',
            'application/json',
            'application/*+json',
        ],
        'purchaseOrdersManagementCreateInvoices' => [
            'application/json-patch+json',
            'application/json',
            'application/*+json',
        ],
        'purchaseOrdersManagementGetByFilter' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation purchaseOrdersManagementAcknowledge
     *
     * Acknowledges lines of a purchase order
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\SingleMerchantAcknowledgePurchaseOrderLinesRequest $singleMerchantAcknowledgePurchaseOrderLinesRequest Model for purchase order and lines data to be acknowledged with the channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrdersManagementAcknowledge'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FriendsOfCE\Merchant\ApiClient\Model\ApiResponse|\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse|\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse
     */
    public function purchaseOrdersManagementAcknowledge($singleMerchantAcknowledgePurchaseOrderLinesRequest = null, string $contentType = self::contentTypes['purchaseOrdersManagementAcknowledge'][0])
    {
        list($response) = $this->purchaseOrdersManagementAcknowledgeWithHttpInfo($singleMerchantAcknowledgePurchaseOrderLinesRequest, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrdersManagementAcknowledgeWithHttpInfo
     *
     * Acknowledges lines of a purchase order
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\SingleMerchantAcknowledgePurchaseOrderLinesRequest $singleMerchantAcknowledgePurchaseOrderLinesRequest Model for purchase order and lines data to be acknowledged with the channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrdersManagementAcknowledge'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FriendsOfCE\Merchant\ApiClient\Model\ApiResponse|\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse|\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrdersManagementAcknowledgeWithHttpInfo($singleMerchantAcknowledgePurchaseOrderLinesRequest = null, string $contentType = self::contentTypes['purchaseOrdersManagementAcknowledge'][0])
    {
        $request = $this->purchaseOrdersManagementAcknowledgeRequest($singleMerchantAcknowledgePurchaseOrderLinesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrdersManagementAcknowledgeAsync
     *
     * Acknowledges lines of a purchase order
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\SingleMerchantAcknowledgePurchaseOrderLinesRequest $singleMerchantAcknowledgePurchaseOrderLinesRequest Model for purchase order and lines data to be acknowledged with the channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrdersManagementAcknowledge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrdersManagementAcknowledgeAsync($singleMerchantAcknowledgePurchaseOrderLinesRequest = null, string $contentType = self::contentTypes['purchaseOrdersManagementAcknowledge'][0])
    {
        return $this->purchaseOrdersManagementAcknowledgeAsyncWithHttpInfo($singleMerchantAcknowledgePurchaseOrderLinesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrdersManagementAcknowledgeAsyncWithHttpInfo
     *
     * Acknowledges lines of a purchase order
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\SingleMerchantAcknowledgePurchaseOrderLinesRequest $singleMerchantAcknowledgePurchaseOrderLinesRequest Model for purchase order and lines data to be acknowledged with the channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrdersManagementAcknowledge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrdersManagementAcknowledgeAsyncWithHttpInfo($singleMerchantAcknowledgePurchaseOrderLinesRequest = null, string $contentType = self::contentTypes['purchaseOrdersManagementAcknowledge'][0])
    {
        $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse';
        $request = $this->purchaseOrdersManagementAcknowledgeRequest($singleMerchantAcknowledgePurchaseOrderLinesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrdersManagementAcknowledge'
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\SingleMerchantAcknowledgePurchaseOrderLinesRequest $singleMerchantAcknowledgePurchaseOrderLinesRequest Model for purchase order and lines data to be acknowledged with the channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrdersManagementAcknowledge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrdersManagementAcknowledgeRequest($singleMerchantAcknowledgePurchaseOrderLinesRequest = null, string $contentType = self::contentTypes['purchaseOrdersManagementAcknowledge'][0])
    {



        $resourcePath = '/v2/purchase-orders/lines/acknowledge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($singleMerchantAcknowledgePurchaseOrderLinesRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($singleMerchantAcknowledgePurchaseOrderLinesRequest));
            } else {
                $httpBody = $singleMerchantAcknowledgePurchaseOrderLinesRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrdersManagementCreateInvoice
     *
     * Creates a purchase order invoice
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\SingleMerchantCreatePurchaseOrderInvoiceRequest $singleMerchantCreatePurchaseOrderInvoiceRequest Model for purchase order invoice. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrdersManagementCreateInvoice'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FriendsOfCE\Merchant\ApiClient\Model\ApiResponse|\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse|\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse
     */
    public function purchaseOrdersManagementCreateInvoice($singleMerchantCreatePurchaseOrderInvoiceRequest = null, string $contentType = self::contentTypes['purchaseOrdersManagementCreateInvoice'][0])
    {
        list($response) = $this->purchaseOrdersManagementCreateInvoiceWithHttpInfo($singleMerchantCreatePurchaseOrderInvoiceRequest, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrdersManagementCreateInvoiceWithHttpInfo
     *
     * Creates a purchase order invoice
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\SingleMerchantCreatePurchaseOrderInvoiceRequest $singleMerchantCreatePurchaseOrderInvoiceRequest Model for purchase order invoice. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrdersManagementCreateInvoice'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FriendsOfCE\Merchant\ApiClient\Model\ApiResponse|\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse|\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrdersManagementCreateInvoiceWithHttpInfo($singleMerchantCreatePurchaseOrderInvoiceRequest = null, string $contentType = self::contentTypes['purchaseOrdersManagementCreateInvoice'][0])
    {
        $request = $this->purchaseOrdersManagementCreateInvoiceRequest($singleMerchantCreatePurchaseOrderInvoiceRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrdersManagementCreateInvoiceAsync
     *
     * Creates a purchase order invoice
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\SingleMerchantCreatePurchaseOrderInvoiceRequest $singleMerchantCreatePurchaseOrderInvoiceRequest Model for purchase order invoice. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrdersManagementCreateInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrdersManagementCreateInvoiceAsync($singleMerchantCreatePurchaseOrderInvoiceRequest = null, string $contentType = self::contentTypes['purchaseOrdersManagementCreateInvoice'][0])
    {
        return $this->purchaseOrdersManagementCreateInvoiceAsyncWithHttpInfo($singleMerchantCreatePurchaseOrderInvoiceRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrdersManagementCreateInvoiceAsyncWithHttpInfo
     *
     * Creates a purchase order invoice
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\SingleMerchantCreatePurchaseOrderInvoiceRequest $singleMerchantCreatePurchaseOrderInvoiceRequest Model for purchase order invoice. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrdersManagementCreateInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrdersManagementCreateInvoiceAsyncWithHttpInfo($singleMerchantCreatePurchaseOrderInvoiceRequest = null, string $contentType = self::contentTypes['purchaseOrdersManagementCreateInvoice'][0])
    {
        $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse';
        $request = $this->purchaseOrdersManagementCreateInvoiceRequest($singleMerchantCreatePurchaseOrderInvoiceRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrdersManagementCreateInvoice'
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\SingleMerchantCreatePurchaseOrderInvoiceRequest $singleMerchantCreatePurchaseOrderInvoiceRequest Model for purchase order invoice. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrdersManagementCreateInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrdersManagementCreateInvoiceRequest($singleMerchantCreatePurchaseOrderInvoiceRequest = null, string $contentType = self::contentTypes['purchaseOrdersManagementCreateInvoice'][0])
    {



        $resourcePath = '/v2/purchase-orders/invoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($singleMerchantCreatePurchaseOrderInvoiceRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($singleMerchantCreatePurchaseOrderInvoiceRequest));
            } else {
                $httpBody = $singleMerchantCreatePurchaseOrderInvoiceRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrdersManagementCreateInvoices
     *
     * Creates a purchase order invoices in a bulk
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\BulkMerchantCreatePurchaseOrderInvoicesRequest $bulkMerchantCreatePurchaseOrderInvoicesRequest Model for purchase order invoices. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrdersManagementCreateInvoices'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FriendsOfCE\Merchant\ApiClient\Model\ApiResponse|\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse|\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse
     */
    public function purchaseOrdersManagementCreateInvoices($bulkMerchantCreatePurchaseOrderInvoicesRequest = null, string $contentType = self::contentTypes['purchaseOrdersManagementCreateInvoices'][0])
    {
        list($response) = $this->purchaseOrdersManagementCreateInvoicesWithHttpInfo($bulkMerchantCreatePurchaseOrderInvoicesRequest, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrdersManagementCreateInvoicesWithHttpInfo
     *
     * Creates a purchase order invoices in a bulk
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\BulkMerchantCreatePurchaseOrderInvoicesRequest $bulkMerchantCreatePurchaseOrderInvoicesRequest Model for purchase order invoices. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrdersManagementCreateInvoices'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FriendsOfCE\Merchant\ApiClient\Model\ApiResponse|\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse|\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrdersManagementCreateInvoicesWithHttpInfo($bulkMerchantCreatePurchaseOrderInvoicesRequest = null, string $contentType = self::contentTypes['purchaseOrdersManagementCreateInvoices'][0])
    {
        $request = $this->purchaseOrdersManagementCreateInvoicesRequest($bulkMerchantCreatePurchaseOrderInvoicesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrdersManagementCreateInvoicesAsync
     *
     * Creates a purchase order invoices in a bulk
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\BulkMerchantCreatePurchaseOrderInvoicesRequest $bulkMerchantCreatePurchaseOrderInvoicesRequest Model for purchase order invoices. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrdersManagementCreateInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrdersManagementCreateInvoicesAsync($bulkMerchantCreatePurchaseOrderInvoicesRequest = null, string $contentType = self::contentTypes['purchaseOrdersManagementCreateInvoices'][0])
    {
        return $this->purchaseOrdersManagementCreateInvoicesAsyncWithHttpInfo($bulkMerchantCreatePurchaseOrderInvoicesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrdersManagementCreateInvoicesAsyncWithHttpInfo
     *
     * Creates a purchase order invoices in a bulk
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\BulkMerchantCreatePurchaseOrderInvoicesRequest $bulkMerchantCreatePurchaseOrderInvoicesRequest Model for purchase order invoices. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrdersManagementCreateInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrdersManagementCreateInvoicesAsyncWithHttpInfo($bulkMerchantCreatePurchaseOrderInvoicesRequest = null, string $contentType = self::contentTypes['purchaseOrdersManagementCreateInvoices'][0])
    {
        $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse';
        $request = $this->purchaseOrdersManagementCreateInvoicesRequest($bulkMerchantCreatePurchaseOrderInvoicesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrdersManagementCreateInvoices'
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\BulkMerchantCreatePurchaseOrderInvoicesRequest $bulkMerchantCreatePurchaseOrderInvoicesRequest Model for purchase order invoices. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrdersManagementCreateInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrdersManagementCreateInvoicesRequest($bulkMerchantCreatePurchaseOrderInvoicesRequest = null, string $contentType = self::contentTypes['purchaseOrdersManagementCreateInvoices'][0])
    {



        $resourcePath = '/v2/purchase-orders/invoice/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bulkMerchantCreatePurchaseOrderInvoicesRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bulkMerchantCreatePurchaseOrderInvoicesRequest));
            } else {
                $httpBody = $bulkMerchantCreatePurchaseOrderInvoicesRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrdersManagementGetByFilter
     *
     * Gets purchase orders by filter
     *
     * @param  PurchaseOrderIdentifierType $identifiersIdentifierType identifiersIdentifierType (optional)
     * @param  string[] $identifiersModels identifiersModels (optional)
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\ModulesPurchaseOrderStatus[] $statuses statuses (optional)
     * @param  \DateTime $orderDateRangeFromDate orderDateRangeFromDate (optional)
     * @param  \DateTime $orderDateRangeToDate orderDateRangeToDate (optional)
     * @param  \DateTime $createDateRangeFromDate createDateRangeFromDate (optional)
     * @param  \DateTime $createDateRangeToDate createDateRangeToDate (optional)
     * @param  \DateTime $updateDateRangeFromDate updateDateRangeFromDate (optional)
     * @param  \DateTime $updateDateRangeToDate updateDateRangeToDate (optional)
     * @param  int[] $channelIds channelIds (optional)
     * @param  ModulesPurchaseOrderType $type type (optional)
     * @param  int $pageIndex pageIndex (optional)
     * @param  int $pageSize pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrdersManagementGetByFilter'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FriendsOfCE\Merchant\ApiClient\Model\CollectionOfIPurchaseOrderByFilter
     */
    public function purchaseOrdersManagementGetByFilter($identifiersIdentifierType = null, $identifiersModels = null, $statuses = null, $orderDateRangeFromDate = null, $orderDateRangeToDate = null, $createDateRangeFromDate = null, $createDateRangeToDate = null, $updateDateRangeFromDate = null, $updateDateRangeToDate = null, $channelIds = null, $type = null, $pageIndex = null, $pageSize = null, string $contentType = self::contentTypes['purchaseOrdersManagementGetByFilter'][0])
    {
        list($response) = $this->purchaseOrdersManagementGetByFilterWithHttpInfo($identifiersIdentifierType, $identifiersModels, $statuses, $orderDateRangeFromDate, $orderDateRangeToDate, $createDateRangeFromDate, $createDateRangeToDate, $updateDateRangeFromDate, $updateDateRangeToDate, $channelIds, $type, $pageIndex, $pageSize, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrdersManagementGetByFilterWithHttpInfo
     *
     * Gets purchase orders by filter
     *
     * @param  PurchaseOrderIdentifierType $identifiersIdentifierType (optional)
     * @param  string[] $identifiersModels (optional)
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\ModulesPurchaseOrderStatus[] $statuses (optional)
     * @param  \DateTime $orderDateRangeFromDate (optional)
     * @param  \DateTime $orderDateRangeToDate (optional)
     * @param  \DateTime $createDateRangeFromDate (optional)
     * @param  \DateTime $createDateRangeToDate (optional)
     * @param  \DateTime $updateDateRangeFromDate (optional)
     * @param  \DateTime $updateDateRangeToDate (optional)
     * @param  int[] $channelIds (optional)
     * @param  ModulesPurchaseOrderType $type (optional)
     * @param  int $pageIndex (optional)
     * @param  int $pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrdersManagementGetByFilter'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FriendsOfCE\Merchant\ApiClient\Model\CollectionOfIPurchaseOrderByFilter, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrdersManagementGetByFilterWithHttpInfo($identifiersIdentifierType = null, $identifiersModels = null, $statuses = null, $orderDateRangeFromDate = null, $orderDateRangeToDate = null, $createDateRangeFromDate = null, $createDateRangeToDate = null, $updateDateRangeFromDate = null, $updateDateRangeToDate = null, $channelIds = null, $type = null, $pageIndex = null, $pageSize = null, string $contentType = self::contentTypes['purchaseOrdersManagementGetByFilter'][0])
    {
        $request = $this->purchaseOrdersManagementGetByFilterRequest($identifiersIdentifierType, $identifiersModels, $statuses, $orderDateRangeFromDate, $orderDateRangeToDate, $createDateRangeFromDate, $createDateRangeToDate, $updateDateRangeFromDate, $updateDateRangeToDate, $channelIds, $type, $pageIndex, $pageSize, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FriendsOfCE\Merchant\ApiClient\Model\CollectionOfIPurchaseOrderByFilter' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FriendsOfCE\Merchant\ApiClient\Model\CollectionOfIPurchaseOrderByFilter' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FriendsOfCE\Merchant\ApiClient\Model\CollectionOfIPurchaseOrderByFilter', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\CollectionOfIPurchaseOrderByFilter';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FriendsOfCE\Merchant\ApiClient\Model\CollectionOfIPurchaseOrderByFilter',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrdersManagementGetByFilterAsync
     *
     * Gets purchase orders by filter
     *
     * @param  PurchaseOrderIdentifierType $identifiersIdentifierType (optional)
     * @param  string[] $identifiersModels (optional)
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\ModulesPurchaseOrderStatus[] $statuses (optional)
     * @param  \DateTime $orderDateRangeFromDate (optional)
     * @param  \DateTime $orderDateRangeToDate (optional)
     * @param  \DateTime $createDateRangeFromDate (optional)
     * @param  \DateTime $createDateRangeToDate (optional)
     * @param  \DateTime $updateDateRangeFromDate (optional)
     * @param  \DateTime $updateDateRangeToDate (optional)
     * @param  int[] $channelIds (optional)
     * @param  ModulesPurchaseOrderType $type (optional)
     * @param  int $pageIndex (optional)
     * @param  int $pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrdersManagementGetByFilter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrdersManagementGetByFilterAsync($identifiersIdentifierType = null, $identifiersModels = null, $statuses = null, $orderDateRangeFromDate = null, $orderDateRangeToDate = null, $createDateRangeFromDate = null, $createDateRangeToDate = null, $updateDateRangeFromDate = null, $updateDateRangeToDate = null, $channelIds = null, $type = null, $pageIndex = null, $pageSize = null, string $contentType = self::contentTypes['purchaseOrdersManagementGetByFilter'][0])
    {
        return $this->purchaseOrdersManagementGetByFilterAsyncWithHttpInfo($identifiersIdentifierType, $identifiersModels, $statuses, $orderDateRangeFromDate, $orderDateRangeToDate, $createDateRangeFromDate, $createDateRangeToDate, $updateDateRangeFromDate, $updateDateRangeToDate, $channelIds, $type, $pageIndex, $pageSize, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrdersManagementGetByFilterAsyncWithHttpInfo
     *
     * Gets purchase orders by filter
     *
     * @param  PurchaseOrderIdentifierType $identifiersIdentifierType (optional)
     * @param  string[] $identifiersModels (optional)
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\ModulesPurchaseOrderStatus[] $statuses (optional)
     * @param  \DateTime $orderDateRangeFromDate (optional)
     * @param  \DateTime $orderDateRangeToDate (optional)
     * @param  \DateTime $createDateRangeFromDate (optional)
     * @param  \DateTime $createDateRangeToDate (optional)
     * @param  \DateTime $updateDateRangeFromDate (optional)
     * @param  \DateTime $updateDateRangeToDate (optional)
     * @param  int[] $channelIds (optional)
     * @param  ModulesPurchaseOrderType $type (optional)
     * @param  int $pageIndex (optional)
     * @param  int $pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrdersManagementGetByFilter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrdersManagementGetByFilterAsyncWithHttpInfo($identifiersIdentifierType = null, $identifiersModels = null, $statuses = null, $orderDateRangeFromDate = null, $orderDateRangeToDate = null, $createDateRangeFromDate = null, $createDateRangeToDate = null, $updateDateRangeFromDate = null, $updateDateRangeToDate = null, $channelIds = null, $type = null, $pageIndex = null, $pageSize = null, string $contentType = self::contentTypes['purchaseOrdersManagementGetByFilter'][0])
    {
        $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\CollectionOfIPurchaseOrderByFilter';
        $request = $this->purchaseOrdersManagementGetByFilterRequest($identifiersIdentifierType, $identifiersModels, $statuses, $orderDateRangeFromDate, $orderDateRangeToDate, $createDateRangeFromDate, $createDateRangeToDate, $updateDateRangeFromDate, $updateDateRangeToDate, $channelIds, $type, $pageIndex, $pageSize, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrdersManagementGetByFilter'
     *
     * @param  PurchaseOrderIdentifierType $identifiersIdentifierType (optional)
     * @param  string[] $identifiersModels (optional)
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\ModulesPurchaseOrderStatus[] $statuses (optional)
     * @param  \DateTime $orderDateRangeFromDate (optional)
     * @param  \DateTime $orderDateRangeToDate (optional)
     * @param  \DateTime $createDateRangeFromDate (optional)
     * @param  \DateTime $createDateRangeToDate (optional)
     * @param  \DateTime $updateDateRangeFromDate (optional)
     * @param  \DateTime $updateDateRangeToDate (optional)
     * @param  int[] $channelIds (optional)
     * @param  ModulesPurchaseOrderType $type (optional)
     * @param  int $pageIndex (optional)
     * @param  int $pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrdersManagementGetByFilter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrdersManagementGetByFilterRequest($identifiersIdentifierType = null, $identifiersModels = null, $statuses = null, $orderDateRangeFromDate = null, $orderDateRangeToDate = null, $createDateRangeFromDate = null, $createDateRangeToDate = null, $updateDateRangeFromDate = null, $updateDateRangeToDate = null, $channelIds = null, $type = null, $pageIndex = null, $pageSize = null, string $contentType = self::contentTypes['purchaseOrdersManagementGetByFilter'][0])
    {















        $resourcePath = '/v2/purchase-orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $identifiersIdentifierType,
            'identifiers.identifierType', // param base name
            'PurchaseOrderIdentifierType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $identifiersModels,
            'identifiers.models', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderDateRangeFromDate,
            'orderDateRange.fromDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderDateRangeToDate,
            'orderDateRange.toDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createDateRangeFromDate,
            'createDateRange.fromDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createDateRangeToDate,
            'createDateRange.toDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updateDateRangeFromDate,
            'updateDateRange.fromDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updateDateRangeToDate,
            'updateDateRange.toDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channelIds,
            'channelIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'ModulesPurchaseOrderType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageIndex,
            'pageIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageSize,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
