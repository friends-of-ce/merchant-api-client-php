<?php
/**
 * ProductApi
 * PHP version 7.4
 *
 * @category Class
 * @package  FriendsOfCE\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.13.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FriendsOfCE\Merchant\ApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use FriendsOfCE\Merchant\ApiClient\ApiException;
use FriendsOfCE\Merchant\ApiClient\Configuration;
use FriendsOfCE\Merchant\ApiClient\HeaderSelector;
use FriendsOfCE\Merchant\ApiClient\ObjectSerializer;

/**
 * ProductApi Class Doc Comment
 *
 * @category Class
 * @package  FriendsOfCE\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'productBulkDelete' => [
            'application/json-patch+json',
            'application/json',
            'application/*+json',
        ],
        'productBulkPatch' => [
            'application/json-patch+json',
            'application/json',
            'application/*+json',
        ],
        'productBulkPatchExtraDataItems' => [
            'application/json-patch+json',
            'application/json',
            'application/*+json',
        ],
        'productCreate' => [
            'application/json-patch+json',
            'application/json',
            'application/*+json',
        ],
        'productDelete' => [
            'application/json',
        ],
        'productFreezeProduct' => [
            'application/json-patch+json',
            'application/json',
            'application/*+json',
        ],
        'productGetByFilter' => [
            'application/json',
        ],
        'productGetByMerchantProductNo' => [
            'application/json',
        ],
        'productPatch' => [
            'application/json-patch+json',
        ],
        'productPatchExtraDataItems' => [
            'application/json-patch+json',
            'application/json',
            'application/*+json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation productBulkDelete
     *
     * Deletes products
     *
     * @param  string[] $requestBody The list of MerchantProductNo of the products you wish to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productBulkDelete'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FriendsOfCE\Merchant\ApiClient\Model\ApiResponse|\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse
     */
    public function productBulkDelete($requestBody, string $contentType = self::contentTypes['productBulkDelete'][0])
    {
        list($response) = $this->productBulkDeleteWithHttpInfo($requestBody, $contentType);
        return $response;
    }

    /**
     * Operation productBulkDeleteWithHttpInfo
     *
     * Deletes products
     *
     * @param  string[] $requestBody The list of MerchantProductNo of the products you wish to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productBulkDelete'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FriendsOfCE\Merchant\ApiClient\Model\ApiResponse|\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function productBulkDeleteWithHttpInfo($requestBody, string $contentType = self::contentTypes['productBulkDelete'][0])
    {
        $request = $this->productBulkDeleteRequest($requestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productBulkDeleteAsync
     *
     * Deletes products
     *
     * @param  string[] $requestBody The list of MerchantProductNo of the products you wish to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productBulkDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productBulkDeleteAsync($requestBody, string $contentType = self::contentTypes['productBulkDelete'][0])
    {
        return $this->productBulkDeleteAsyncWithHttpInfo($requestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productBulkDeleteAsyncWithHttpInfo
     *
     * Deletes products
     *
     * @param  string[] $requestBody The list of MerchantProductNo of the products you wish to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productBulkDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productBulkDeleteAsyncWithHttpInfo($requestBody, string $contentType = self::contentTypes['productBulkDelete'][0])
    {
        $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse';
        $request = $this->productBulkDeleteRequest($requestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productBulkDelete'
     *
     * @param  string[] $requestBody The list of MerchantProductNo of the products you wish to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productBulkDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productBulkDeleteRequest($requestBody, string $contentType = self::contentTypes['productBulkDelete'][0])
    {

        // verify the required parameter 'requestBody' is set
        if ($requestBody === null || (is_array($requestBody) && count($requestBody) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $requestBody when calling productBulkDelete'
            );
        }


        $resourcePath = '/v2/products/bulkdelete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($requestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($requestBody));
            } else {
                $httpBody = $requestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productBulkPatch
     *
     * Updates products attributes
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\PatchMerchantProductDto $patchMerchantProductDto 1) PropertiesToUpdate: Fields to update&lt;br /&gt;2) MerchantProductRequestModels: Products to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productBulkPatch'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult
     */
    public function productBulkPatch($patchMerchantProductDto = null, string $contentType = self::contentTypes['productBulkPatch'][0])
    {
        list($response) = $this->productBulkPatchWithHttpInfo($patchMerchantProductDto, $contentType);
        return $response;
    }

    /**
     * Operation productBulkPatchWithHttpInfo
     *
     * Updates products attributes
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\PatchMerchantProductDto $patchMerchantProductDto 1) PropertiesToUpdate: Fields to update&lt;br /&gt;2) MerchantProductRequestModels: Products to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productBulkPatch'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function productBulkPatchWithHttpInfo($patchMerchantProductDto = null, string $contentType = self::contentTypes['productBulkPatch'][0])
    {
        $request = $this->productBulkPatchRequest($patchMerchantProductDto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productBulkPatchAsync
     *
     * Updates products attributes
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\PatchMerchantProductDto $patchMerchantProductDto 1) PropertiesToUpdate: Fields to update&lt;br /&gt;2) MerchantProductRequestModels: Products to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productBulkPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productBulkPatchAsync($patchMerchantProductDto = null, string $contentType = self::contentTypes['productBulkPatch'][0])
    {
        return $this->productBulkPatchAsyncWithHttpInfo($patchMerchantProductDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productBulkPatchAsyncWithHttpInfo
     *
     * Updates products attributes
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\PatchMerchantProductDto $patchMerchantProductDto 1) PropertiesToUpdate: Fields to update&lt;br /&gt;2) MerchantProductRequestModels: Products to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productBulkPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productBulkPatchAsyncWithHttpInfo($patchMerchantProductDto = null, string $contentType = self::contentTypes['productBulkPatch'][0])
    {
        $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult';
        $request = $this->productBulkPatchRequest($patchMerchantProductDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productBulkPatch'
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\PatchMerchantProductDto $patchMerchantProductDto 1) PropertiesToUpdate: Fields to update&lt;br /&gt;2) MerchantProductRequestModels: Products to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productBulkPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productBulkPatchRequest($patchMerchantProductDto = null, string $contentType = self::contentTypes['productBulkPatch'][0])
    {



        $resourcePath = '/v2/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patchMerchantProductDto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patchMerchantProductDto));
            } else {
                $httpBody = $patchMerchantProductDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productBulkPatchExtraDataItems
     *
     * Adds, updates, or deletes custom attributes
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\MerchantProductExtraDataRequest[] $merchantProductExtraDataRequest merchantProductExtraDataRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productBulkPatchExtraDataItems'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult
     */
    public function productBulkPatchExtraDataItems($merchantProductExtraDataRequest = null, string $contentType = self::contentTypes['productBulkPatchExtraDataItems'][0])
    {
        list($response) = $this->productBulkPatchExtraDataItemsWithHttpInfo($merchantProductExtraDataRequest, $contentType);
        return $response;
    }

    /**
     * Operation productBulkPatchExtraDataItemsWithHttpInfo
     *
     * Adds, updates, or deletes custom attributes
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\MerchantProductExtraDataRequest[] $merchantProductExtraDataRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productBulkPatchExtraDataItems'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function productBulkPatchExtraDataItemsWithHttpInfo($merchantProductExtraDataRequest = null, string $contentType = self::contentTypes['productBulkPatchExtraDataItems'][0])
    {
        $request = $this->productBulkPatchExtraDataItemsRequest($merchantProductExtraDataRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productBulkPatchExtraDataItemsAsync
     *
     * Adds, updates, or deletes custom attributes
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\MerchantProductExtraDataRequest[] $merchantProductExtraDataRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productBulkPatchExtraDataItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productBulkPatchExtraDataItemsAsync($merchantProductExtraDataRequest = null, string $contentType = self::contentTypes['productBulkPatchExtraDataItems'][0])
    {
        return $this->productBulkPatchExtraDataItemsAsyncWithHttpInfo($merchantProductExtraDataRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productBulkPatchExtraDataItemsAsyncWithHttpInfo
     *
     * Adds, updates, or deletes custom attributes
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\MerchantProductExtraDataRequest[] $merchantProductExtraDataRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productBulkPatchExtraDataItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productBulkPatchExtraDataItemsAsyncWithHttpInfo($merchantProductExtraDataRequest = null, string $contentType = self::contentTypes['productBulkPatchExtraDataItems'][0])
    {
        $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult';
        $request = $this->productBulkPatchExtraDataItemsRequest($merchantProductExtraDataRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productBulkPatchExtraDataItems'
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\MerchantProductExtraDataRequest[] $merchantProductExtraDataRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productBulkPatchExtraDataItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productBulkPatchExtraDataItemsRequest($merchantProductExtraDataRequest = null, string $contentType = self::contentTypes['productBulkPatchExtraDataItems'][0])
    {



        $resourcePath = '/v2/products/extra-data/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($merchantProductExtraDataRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($merchantProductExtraDataRequest));
            } else {
                $httpBody = $merchantProductExtraDataRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productCreate
     *
     * Updates or creates products
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\MerchantProductRequest[] $merchantProductRequest merchantProductRequest (required)
     * @param  bool $ignoreStock ignoreStock (optional, default to false)
     * @param  bool $ignorePrice ignorePrice (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productCreate'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult
     */
    public function productCreate($merchantProductRequest, $ignoreStock = false, $ignorePrice = false, string $contentType = self::contentTypes['productCreate'][0])
    {
        list($response) = $this->productCreateWithHttpInfo($merchantProductRequest, $ignoreStock, $ignorePrice, $contentType);
        return $response;
    }

    /**
     * Operation productCreateWithHttpInfo
     *
     * Updates or creates products
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\MerchantProductRequest[] $merchantProductRequest (required)
     * @param  bool $ignoreStock (optional, default to false)
     * @param  bool $ignorePrice (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productCreate'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function productCreateWithHttpInfo($merchantProductRequest, $ignoreStock = false, $ignorePrice = false, string $contentType = self::contentTypes['productCreate'][0])
    {
        $request = $this->productCreateRequest($merchantProductRequest, $ignoreStock, $ignorePrice, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productCreateAsync
     *
     * Updates or creates products
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\MerchantProductRequest[] $merchantProductRequest (required)
     * @param  bool $ignoreStock (optional, default to false)
     * @param  bool $ignorePrice (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productCreateAsync($merchantProductRequest, $ignoreStock = false, $ignorePrice = false, string $contentType = self::contentTypes['productCreate'][0])
    {
        return $this->productCreateAsyncWithHttpInfo($merchantProductRequest, $ignoreStock, $ignorePrice, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productCreateAsyncWithHttpInfo
     *
     * Updates or creates products
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\MerchantProductRequest[] $merchantProductRequest (required)
     * @param  bool $ignoreStock (optional, default to false)
     * @param  bool $ignorePrice (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productCreateAsyncWithHttpInfo($merchantProductRequest, $ignoreStock = false, $ignorePrice = false, string $contentType = self::contentTypes['productCreate'][0])
    {
        $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult';
        $request = $this->productCreateRequest($merchantProductRequest, $ignoreStock, $ignorePrice, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productCreate'
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\MerchantProductRequest[] $merchantProductRequest (required)
     * @param  bool $ignoreStock (optional, default to false)
     * @param  bool $ignorePrice (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productCreateRequest($merchantProductRequest, $ignoreStock = false, $ignorePrice = false, string $contentType = self::contentTypes['productCreate'][0])
    {

        // verify the required parameter 'merchantProductRequest' is set
        if ($merchantProductRequest === null || (is_array($merchantProductRequest) && count($merchantProductRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantProductRequest when calling productCreate'
            );
        }




        $resourcePath = '/v2/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ignoreStock,
            'ignoreStock', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ignorePrice,
            'ignorePrice', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($merchantProductRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($merchantProductRequest));
            } else {
                $httpBody = $merchantProductRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productDelete
     *
     * Deletes a product
     *
     * @param  string $merchantProductNo The MerchantProductNo of the product you wish to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productDelete'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FriendsOfCE\Merchant\ApiClient\Model\ApiResponse|\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse
     */
    public function productDelete($merchantProductNo, string $contentType = self::contentTypes['productDelete'][0])
    {
        list($response) = $this->productDeleteWithHttpInfo($merchantProductNo, $contentType);
        return $response;
    }

    /**
     * Operation productDeleteWithHttpInfo
     *
     * Deletes a product
     *
     * @param  string $merchantProductNo The MerchantProductNo of the product you wish to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productDelete'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FriendsOfCE\Merchant\ApiClient\Model\ApiResponse|\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function productDeleteWithHttpInfo($merchantProductNo, string $contentType = self::contentTypes['productDelete'][0])
    {
        $request = $this->productDeleteRequest($merchantProductNo, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productDeleteAsync
     *
     * Deletes a product
     *
     * @param  string $merchantProductNo The MerchantProductNo of the product you wish to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productDeleteAsync($merchantProductNo, string $contentType = self::contentTypes['productDelete'][0])
    {
        return $this->productDeleteAsyncWithHttpInfo($merchantProductNo, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productDeleteAsyncWithHttpInfo
     *
     * Deletes a product
     *
     * @param  string $merchantProductNo The MerchantProductNo of the product you wish to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productDeleteAsyncWithHttpInfo($merchantProductNo, string $contentType = self::contentTypes['productDelete'][0])
    {
        $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\ApiResponse';
        $request = $this->productDeleteRequest($merchantProductNo, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productDelete'
     *
     * @param  string $merchantProductNo The MerchantProductNo of the product you wish to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productDeleteRequest($merchantProductNo, string $contentType = self::contentTypes['productDelete'][0])
    {

        // verify the required parameter 'merchantProductNo' is set
        if ($merchantProductNo === null || (is_array($merchantProductNo) && count($merchantProductNo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantProductNo when calling productDelete'
            );
        }


        $resourcePath = '/v2/products/{merchantProductNo}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantProductNo !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantProductNo' . '}',
                ObjectSerializer::toPathValue($merchantProductNo),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productFreezeProduct
     *
     * Updates selected products and sets them either to frozen or not-frozen status.
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\FreezeProductRequest[] $freezeProductRequest freezeProductRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productFreezeProduct'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FriendsOfCE\Merchant\ApiClient\Model\SingleOfApiResponse
     */
    public function productFreezeProduct($freezeProductRequest = null, string $contentType = self::contentTypes['productFreezeProduct'][0])
    {
        list($response) = $this->productFreezeProductWithHttpInfo($freezeProductRequest, $contentType);
        return $response;
    }

    /**
     * Operation productFreezeProductWithHttpInfo
     *
     * Updates selected products and sets them either to frozen or not-frozen status.
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\FreezeProductRequest[] $freezeProductRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productFreezeProduct'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FriendsOfCE\Merchant\ApiClient\Model\SingleOfApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function productFreezeProductWithHttpInfo($freezeProductRequest = null, string $contentType = self::contentTypes['productFreezeProduct'][0])
    {
        $request = $this->productFreezeProductRequest($freezeProductRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FriendsOfCE\Merchant\ApiClient\Model\SingleOfApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FriendsOfCE\Merchant\ApiClient\Model\SingleOfApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productFreezeProductAsync
     *
     * Updates selected products and sets them either to frozen or not-frozen status.
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\FreezeProductRequest[] $freezeProductRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productFreezeProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productFreezeProductAsync($freezeProductRequest = null, string $contentType = self::contentTypes['productFreezeProduct'][0])
    {
        return $this->productFreezeProductAsyncWithHttpInfo($freezeProductRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productFreezeProductAsyncWithHttpInfo
     *
     * Updates selected products and sets them either to frozen or not-frozen status.
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\FreezeProductRequest[] $freezeProductRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productFreezeProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productFreezeProductAsyncWithHttpInfo($freezeProductRequest = null, string $contentType = self::contentTypes['productFreezeProduct'][0])
    {
        $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfApiResponse';
        $request = $this->productFreezeProductRequest($freezeProductRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productFreezeProduct'
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\FreezeProductRequest[] $freezeProductRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productFreezeProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productFreezeProductRequest($freezeProductRequest = null, string $contentType = self::contentTypes['productFreezeProduct'][0])
    {



        $resourcePath = '/v2/products/freezeproducts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($freezeProductRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($freezeProductRequest));
            } else {
                $httpBody = $freezeProductRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productGetByFilter
     *
     * Gets products
     *
     * @param  string $search Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters. (optional)
     * @param  string[] $eanList Search products by submitting a list of EAN&#39;s. (optional)
     * @param  string[] $merchantProductNoList Search products by submitting a list of MerchantProductNo&#39;s. (optional)
     * @param  int $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productGetByFilter'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FriendsOfCE\Merchant\ApiClient\Model\CollectionOfMerchantProductResponse
     */
    public function productGetByFilter($search = null, $eanList = null, $merchantProductNoList = null, $page = null, string $contentType = self::contentTypes['productGetByFilter'][0])
    {
        list($response) = $this->productGetByFilterWithHttpInfo($search, $eanList, $merchantProductNoList, $page, $contentType);
        return $response;
    }

    /**
     * Operation productGetByFilterWithHttpInfo
     *
     * Gets products
     *
     * @param  string $search Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters. (optional)
     * @param  string[] $eanList Search products by submitting a list of EAN&#39;s. (optional)
     * @param  string[] $merchantProductNoList Search products by submitting a list of MerchantProductNo&#39;s. (optional)
     * @param  int $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productGetByFilter'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FriendsOfCE\Merchant\ApiClient\Model\CollectionOfMerchantProductResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGetByFilterWithHttpInfo($search = null, $eanList = null, $merchantProductNoList = null, $page = null, string $contentType = self::contentTypes['productGetByFilter'][0])
    {
        $request = $this->productGetByFilterRequest($search, $eanList, $merchantProductNoList, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FriendsOfCE\Merchant\ApiClient\Model\CollectionOfMerchantProductResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FriendsOfCE\Merchant\ApiClient\Model\CollectionOfMerchantProductResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FriendsOfCE\Merchant\ApiClient\Model\CollectionOfMerchantProductResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\CollectionOfMerchantProductResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FriendsOfCE\Merchant\ApiClient\Model\CollectionOfMerchantProductResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productGetByFilterAsync
     *
     * Gets products
     *
     * @param  string $search Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters. (optional)
     * @param  string[] $eanList Search products by submitting a list of EAN&#39;s. (optional)
     * @param  string[] $merchantProductNoList Search products by submitting a list of MerchantProductNo&#39;s. (optional)
     * @param  int $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productGetByFilter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetByFilterAsync($search = null, $eanList = null, $merchantProductNoList = null, $page = null, string $contentType = self::contentTypes['productGetByFilter'][0])
    {
        return $this->productGetByFilterAsyncWithHttpInfo($search, $eanList, $merchantProductNoList, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productGetByFilterAsyncWithHttpInfo
     *
     * Gets products
     *
     * @param  string $search Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters. (optional)
     * @param  string[] $eanList Search products by submitting a list of EAN&#39;s. (optional)
     * @param  string[] $merchantProductNoList Search products by submitting a list of MerchantProductNo&#39;s. (optional)
     * @param  int $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productGetByFilter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetByFilterAsyncWithHttpInfo($search = null, $eanList = null, $merchantProductNoList = null, $page = null, string $contentType = self::contentTypes['productGetByFilter'][0])
    {
        $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\CollectionOfMerchantProductResponse';
        $request = $this->productGetByFilterRequest($search, $eanList, $merchantProductNoList, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productGetByFilter'
     *
     * @param  string $search Search product(s) by Name, MerchantProductNo, Ean or Brand&lt;br /&gt;This search is applied to the result after applying the other filters. (optional)
     * @param  string[] $eanList Search products by submitting a list of EAN&#39;s. (optional)
     * @param  string[] $merchantProductNoList Search products by submitting a list of MerchantProductNo&#39;s. (optional)
     * @param  int $page The page to filter on. Starts at 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productGetByFilter'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productGetByFilterRequest($search = null, $eanList = null, $merchantProductNoList = null, $page = null, string $contentType = self::contentTypes['productGetByFilter'][0])
    {






        $resourcePath = '/v2/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $eanList,
            'eanList', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $merchantProductNoList,
            'merchantProductNoList', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productGetByMerchantProductNo
     *
     * Gets a product
     *
     * @param  string $merchantProductNo The unique product reference used by the Merchant (sku). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productGetByMerchantProductNo'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FriendsOfCE\Merchant\ApiClient\Model\SingleOfMerchantProductResponse|\FriendsOfCE\Merchant\ApiClient\Model\SingleOfMerchantProductResponse
     */
    public function productGetByMerchantProductNo($merchantProductNo, string $contentType = self::contentTypes['productGetByMerchantProductNo'][0])
    {
        list($response) = $this->productGetByMerchantProductNoWithHttpInfo($merchantProductNo, $contentType);
        return $response;
    }

    /**
     * Operation productGetByMerchantProductNoWithHttpInfo
     *
     * Gets a product
     *
     * @param  string $merchantProductNo The unique product reference used by the Merchant (sku). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productGetByMerchantProductNo'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FriendsOfCE\Merchant\ApiClient\Model\SingleOfMerchantProductResponse|\FriendsOfCE\Merchant\ApiClient\Model\SingleOfMerchantProductResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGetByMerchantProductNoWithHttpInfo($merchantProductNo, string $contentType = self::contentTypes['productGetByMerchantProductNo'][0])
    {
        $request = $this->productGetByMerchantProductNoRequest($merchantProductNo, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FriendsOfCE\Merchant\ApiClient\Model\SingleOfMerchantProductResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FriendsOfCE\Merchant\ApiClient\Model\SingleOfMerchantProductResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfMerchantProductResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\FriendsOfCE\Merchant\ApiClient\Model\SingleOfMerchantProductResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FriendsOfCE\Merchant\ApiClient\Model\SingleOfMerchantProductResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfMerchantProductResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfMerchantProductResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfMerchantProductResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfMerchantProductResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productGetByMerchantProductNoAsync
     *
     * Gets a product
     *
     * @param  string $merchantProductNo The unique product reference used by the Merchant (sku). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productGetByMerchantProductNo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetByMerchantProductNoAsync($merchantProductNo, string $contentType = self::contentTypes['productGetByMerchantProductNo'][0])
    {
        return $this->productGetByMerchantProductNoAsyncWithHttpInfo($merchantProductNo, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productGetByMerchantProductNoAsyncWithHttpInfo
     *
     * Gets a product
     *
     * @param  string $merchantProductNo The unique product reference used by the Merchant (sku). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productGetByMerchantProductNo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetByMerchantProductNoAsyncWithHttpInfo($merchantProductNo, string $contentType = self::contentTypes['productGetByMerchantProductNo'][0])
    {
        $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfMerchantProductResponse';
        $request = $this->productGetByMerchantProductNoRequest($merchantProductNo, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productGetByMerchantProductNo'
     *
     * @param  string $merchantProductNo The unique product reference used by the Merchant (sku). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productGetByMerchantProductNo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productGetByMerchantProductNoRequest($merchantProductNo, string $contentType = self::contentTypes['productGetByMerchantProductNo'][0])
    {

        // verify the required parameter 'merchantProductNo' is set
        if ($merchantProductNo === null || (is_array($merchantProductNo) && count($merchantProductNo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantProductNo when calling productGetByMerchantProductNo'
            );
        }


        $resourcePath = '/v2/products/{merchantProductNo}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantProductNo !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantProductNo' . '}',
                ObjectSerializer::toPathValue($merchantProductNo),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productPatch
     *
     * Updates product attributes
     *
     * @param  string $merchantProductNo The MerchantProductNo of the product you wish to patch (required)
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\Operation[] $operation The JsonPatchDocument providing the operations you wish to perform on the product. &lt;br /&gt; Value contains the value you wish to set on the property you&#39;re updating (used with operations \&quot;add\&quot; and \&quot;replace\&quot;).&lt;br /&gt; Path contains the path to the property you&#39;re updating (e.g. Description). Every property in the model used for creation an updating can be used.&lt;br /&gt; Op contains the operation you wish to perform (\&quot;add\&quot;,\&quot;replace\&quot;,\&quot;remove\&quot;).&lt;br /&gt; From is only used when using the \&quot;move\&quot; operation. It refers to the source path of the value to be moved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPatch'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult
     */
    public function productPatch($merchantProductNo, $operation = null, string $contentType = self::contentTypes['productPatch'][0])
    {
        list($response) = $this->productPatchWithHttpInfo($merchantProductNo, $operation, $contentType);
        return $response;
    }

    /**
     * Operation productPatchWithHttpInfo
     *
     * Updates product attributes
     *
     * @param  string $merchantProductNo The MerchantProductNo of the product you wish to patch (required)
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\Operation[] $operation The JsonPatchDocument providing the operations you wish to perform on the product. &lt;br /&gt; Value contains the value you wish to set on the property you&#39;re updating (used with operations \&quot;add\&quot; and \&quot;replace\&quot;).&lt;br /&gt; Path contains the path to the property you&#39;re updating (e.g. Description). Every property in the model used for creation an updating can be used.&lt;br /&gt; Op contains the operation you wish to perform (\&quot;add\&quot;,\&quot;replace\&quot;,\&quot;remove\&quot;).&lt;br /&gt; From is only used when using the \&quot;move\&quot; operation. It refers to the source path of the value to be moved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPatch'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function productPatchWithHttpInfo($merchantProductNo, $operation = null, string $contentType = self::contentTypes['productPatch'][0])
    {
        $request = $this->productPatchRequest($merchantProductNo, $operation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productPatchAsync
     *
     * Updates product attributes
     *
     * @param  string $merchantProductNo The MerchantProductNo of the product you wish to patch (required)
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\Operation[] $operation The JsonPatchDocument providing the operations you wish to perform on the product. &lt;br /&gt; Value contains the value you wish to set on the property you&#39;re updating (used with operations \&quot;add\&quot; and \&quot;replace\&quot;).&lt;br /&gt; Path contains the path to the property you&#39;re updating (e.g. Description). Every property in the model used for creation an updating can be used.&lt;br /&gt; Op contains the operation you wish to perform (\&quot;add\&quot;,\&quot;replace\&quot;,\&quot;remove\&quot;).&lt;br /&gt; From is only used when using the \&quot;move\&quot; operation. It refers to the source path of the value to be moved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPatchAsync($merchantProductNo, $operation = null, string $contentType = self::contentTypes['productPatch'][0])
    {
        return $this->productPatchAsyncWithHttpInfo($merchantProductNo, $operation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productPatchAsyncWithHttpInfo
     *
     * Updates product attributes
     *
     * @param  string $merchantProductNo The MerchantProductNo of the product you wish to patch (required)
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\Operation[] $operation The JsonPatchDocument providing the operations you wish to perform on the product. &lt;br /&gt; Value contains the value you wish to set on the property you&#39;re updating (used with operations \&quot;add\&quot; and \&quot;replace\&quot;).&lt;br /&gt; Path contains the path to the property you&#39;re updating (e.g. Description). Every property in the model used for creation an updating can be used.&lt;br /&gt; Op contains the operation you wish to perform (\&quot;add\&quot;,\&quot;replace\&quot;,\&quot;remove\&quot;).&lt;br /&gt; From is only used when using the \&quot;move\&quot; operation. It refers to the source path of the value to be moved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPatchAsyncWithHttpInfo($merchantProductNo, $operation = null, string $contentType = self::contentTypes['productPatch'][0])
    {
        $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult';
        $request = $this->productPatchRequest($merchantProductNo, $operation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productPatch'
     *
     * @param  string $merchantProductNo The MerchantProductNo of the product you wish to patch (required)
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\Operation[] $operation The JsonPatchDocument providing the operations you wish to perform on the product. &lt;br /&gt; Value contains the value you wish to set on the property you&#39;re updating (used with operations \&quot;add\&quot; and \&quot;replace\&quot;).&lt;br /&gt; Path contains the path to the property you&#39;re updating (e.g. Description). Every property in the model used for creation an updating can be used.&lt;br /&gt; Op contains the operation you wish to perform (\&quot;add\&quot;,\&quot;replace\&quot;,\&quot;remove\&quot;).&lt;br /&gt; From is only used when using the \&quot;move\&quot; operation. It refers to the source path of the value to be moved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productPatchRequest($merchantProductNo, $operation = null, string $contentType = self::contentTypes['productPatch'][0])
    {

        // verify the required parameter 'merchantProductNo' is set
        if ($merchantProductNo === null || (is_array($merchantProductNo) && count($merchantProductNo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantProductNo when calling productPatch'
            );
        }



        $resourcePath = '/v2/products/{merchantProductNo}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchantProductNo !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantProductNo' . '}',
                ObjectSerializer::toPathValue($merchantProductNo),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($operation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($operation));
            } else {
                $httpBody = $operation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productPatchExtraDataItems
     *
     * Adds, updates, or deletes a custom attribute
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\MerchantProductExtraDataRequest $merchantProductExtraDataRequest merchantProductExtraDataRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPatchExtraDataItems'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult
     */
    public function productPatchExtraDataItems($merchantProductExtraDataRequest = null, string $contentType = self::contentTypes['productPatchExtraDataItems'][0])
    {
        list($response) = $this->productPatchExtraDataItemsWithHttpInfo($merchantProductExtraDataRequest, $contentType);
        return $response;
    }

    /**
     * Operation productPatchExtraDataItemsWithHttpInfo
     *
     * Adds, updates, or deletes a custom attribute
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\MerchantProductExtraDataRequest $merchantProductExtraDataRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPatchExtraDataItems'] to see the possible values for this operation
     *
     * @throws \FriendsOfCE\Merchant\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function productPatchExtraDataItemsWithHttpInfo($merchantProductExtraDataRequest = null, string $contentType = self::contentTypes['productPatchExtraDataItems'][0])
    {
        $request = $this->productPatchExtraDataItemsRequest($merchantProductExtraDataRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productPatchExtraDataItemsAsync
     *
     * Adds, updates, or deletes a custom attribute
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\MerchantProductExtraDataRequest $merchantProductExtraDataRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPatchExtraDataItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPatchExtraDataItemsAsync($merchantProductExtraDataRequest = null, string $contentType = self::contentTypes['productPatchExtraDataItems'][0])
    {
        return $this->productPatchExtraDataItemsAsyncWithHttpInfo($merchantProductExtraDataRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productPatchExtraDataItemsAsyncWithHttpInfo
     *
     * Adds, updates, or deletes a custom attribute
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\MerchantProductExtraDataRequest $merchantProductExtraDataRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPatchExtraDataItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productPatchExtraDataItemsAsyncWithHttpInfo($merchantProductExtraDataRequest = null, string $contentType = self::contentTypes['productPatchExtraDataItems'][0])
    {
        $returnType = '\FriendsOfCE\Merchant\ApiClient\Model\SingleOfProductCreationResult';
        $request = $this->productPatchExtraDataItemsRequest($merchantProductExtraDataRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productPatchExtraDataItems'
     *
     * @param  \FriendsOfCE\Merchant\ApiClient\Model\MerchantProductExtraDataRequest $merchantProductExtraDataRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productPatchExtraDataItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productPatchExtraDataItemsRequest($merchantProductExtraDataRequest = null, string $contentType = self::contentTypes['productPatchExtraDataItems'][0])
    {



        $resourcePath = '/v2/products/extra-data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($merchantProductExtraDataRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($merchantProductExtraDataRequest));
            } else {
                $httpBody = $merchantProductExtraDataRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
