<?php
/**
 * MerchantFulfillmentStockLocationItemResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FriendsOfCE\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.15.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FriendsOfCE\Merchant\ApiClient\Model;

use \ArrayAccess;
use \FriendsOfCE\Merchant\ApiClient\ObjectSerializer;

/**
 * MerchantFulfillmentStockLocationItemResponse Class Doc Comment
 *
 * @category Class
 * @package  FriendsOfCE\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MerchantFulfillmentStockLocationItemResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MerchantFulfillmentStockLocationItemResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'reservedQuantity' => 'int',
        'availableQuantity' => 'int',
        'allocatedQuantity' => 'int',
        'inTransitQuantity' => 'int',
        'fulfillmentCenterProcessingQuantity' => 'int',
        'defectiveQuantity' => 'int',
        'expiredQuantity' => 'int',
        'warehouseDamagedQuantity' => 'int',
        'customerDamagedQuantity' => 'int',
        'carrierDamagedQuantity' => 'int',
        'pendingPickupQuantity' => 'int',
        'inboundQuantity' => 'int',
        'returnQuantity' => 'int',
        'researchingQuantity' => 'int',
        'updatedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'name' => null,
        'reservedQuantity' => 'int32',
        'availableQuantity' => 'int32',
        'allocatedQuantity' => 'int32',
        'inTransitQuantity' => 'int32',
        'fulfillmentCenterProcessingQuantity' => 'int32',
        'defectiveQuantity' => 'int32',
        'expiredQuantity' => 'int32',
        'warehouseDamagedQuantity' => 'int32',
        'customerDamagedQuantity' => 'int32',
        'carrierDamagedQuantity' => 'int32',
        'pendingPickupQuantity' => 'int32',
        'inboundQuantity' => 'int32',
        'returnQuantity' => 'int32',
        'researchingQuantity' => 'int32',
        'updatedAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => true,
        'reservedQuantity' => false,
        'availableQuantity' => false,
        'allocatedQuantity' => false,
        'inTransitQuantity' => false,
        'fulfillmentCenterProcessingQuantity' => false,
        'defectiveQuantity' => false,
        'expiredQuantity' => false,
        'warehouseDamagedQuantity' => false,
        'customerDamagedQuantity' => false,
        'carrierDamagedQuantity' => false,
        'pendingPickupQuantity' => false,
        'inboundQuantity' => false,
        'returnQuantity' => false,
        'researchingQuantity' => false,
        'updatedAt' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'name' => 'Name',
        'reservedQuantity' => 'ReservedQuantity',
        'availableQuantity' => 'AvailableQuantity',
        'allocatedQuantity' => 'AllocatedQuantity',
        'inTransitQuantity' => 'InTransitQuantity',
        'fulfillmentCenterProcessingQuantity' => 'FulfillmentCenterProcessingQuantity',
        'defectiveQuantity' => 'DefectiveQuantity',
        'expiredQuantity' => 'ExpiredQuantity',
        'warehouseDamagedQuantity' => 'WarehouseDamagedQuantity',
        'customerDamagedQuantity' => 'CustomerDamagedQuantity',
        'carrierDamagedQuantity' => 'CarrierDamagedQuantity',
        'pendingPickupQuantity' => 'PendingPickupQuantity',
        'inboundQuantity' => 'InboundQuantity',
        'returnQuantity' => 'ReturnQuantity',
        'researchingQuantity' => 'ResearchingQuantity',
        'updatedAt' => 'UpdatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'reservedQuantity' => 'setReservedQuantity',
        'availableQuantity' => 'setAvailableQuantity',
        'allocatedQuantity' => 'setAllocatedQuantity',
        'inTransitQuantity' => 'setInTransitQuantity',
        'fulfillmentCenterProcessingQuantity' => 'setFulfillmentCenterProcessingQuantity',
        'defectiveQuantity' => 'setDefectiveQuantity',
        'expiredQuantity' => 'setExpiredQuantity',
        'warehouseDamagedQuantity' => 'setWarehouseDamagedQuantity',
        'customerDamagedQuantity' => 'setCustomerDamagedQuantity',
        'carrierDamagedQuantity' => 'setCarrierDamagedQuantity',
        'pendingPickupQuantity' => 'setPendingPickupQuantity',
        'inboundQuantity' => 'setInboundQuantity',
        'returnQuantity' => 'setReturnQuantity',
        'researchingQuantity' => 'setResearchingQuantity',
        'updatedAt' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'reservedQuantity' => 'getReservedQuantity',
        'availableQuantity' => 'getAvailableQuantity',
        'allocatedQuantity' => 'getAllocatedQuantity',
        'inTransitQuantity' => 'getInTransitQuantity',
        'fulfillmentCenterProcessingQuantity' => 'getFulfillmentCenterProcessingQuantity',
        'defectiveQuantity' => 'getDefectiveQuantity',
        'expiredQuantity' => 'getExpiredQuantity',
        'warehouseDamagedQuantity' => 'getWarehouseDamagedQuantity',
        'customerDamagedQuantity' => 'getCustomerDamagedQuantity',
        'carrierDamagedQuantity' => 'getCarrierDamagedQuantity',
        'pendingPickupQuantity' => 'getPendingPickupQuantity',
        'inboundQuantity' => 'getInboundQuantity',
        'returnQuantity' => 'getReturnQuantity',
        'researchingQuantity' => 'getResearchingQuantity',
        'updatedAt' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('reservedQuantity', $data ?? [], null);
        $this->setIfExists('availableQuantity', $data ?? [], null);
        $this->setIfExists('allocatedQuantity', $data ?? [], null);
        $this->setIfExists('inTransitQuantity', $data ?? [], null);
        $this->setIfExists('fulfillmentCenterProcessingQuantity', $data ?? [], null);
        $this->setIfExists('defectiveQuantity', $data ?? [], null);
        $this->setIfExists('expiredQuantity', $data ?? [], null);
        $this->setIfExists('warehouseDamagedQuantity', $data ?? [], null);
        $this->setIfExists('customerDamagedQuantity', $data ?? [], null);
        $this->setIfExists('carrierDamagedQuantity', $data ?? [], null);
        $this->setIfExists('pendingPickupQuantity', $data ?? [], null);
        $this->setIfExists('inboundQuantity', $data ?? [], null);
        $this->setIfExists('returnQuantity', $data ?? [], null);
        $this->setIfExists('researchingQuantity', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ChannelEngine id of the stock location.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The ChannelEngine name of the stock location.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets reservedQuantity
     *
     * @return int|null
     */
    public function getReservedQuantity()
    {
        return $this->container['reservedQuantity'];
    }

    /**
     * Sets reservedQuantity
     *
     * @param int|null $reservedQuantity Total quantity reserved for orders.
     *
     * @return self
     */
    public function setReservedQuantity($reservedQuantity)
    {
        if (is_null($reservedQuantity)) {
            throw new \InvalidArgumentException('non-nullable reservedQuantity cannot be null');
        }
        $this->container['reservedQuantity'] = $reservedQuantity;

        return $this;
    }

    /**
     * Gets availableQuantity
     *
     * @return int|null
     */
    public function getAvailableQuantity()
    {
        return $this->container['availableQuantity'];
    }

    /**
     * Sets availableQuantity
     *
     * @param int|null $availableQuantity The quantity that is available for fulfillment orders.
     *
     * @return self
     */
    public function setAvailableQuantity($availableQuantity)
    {
        if (is_null($availableQuantity)) {
            throw new \InvalidArgumentException('non-nullable availableQuantity cannot be null');
        }
        $this->container['availableQuantity'] = $availableQuantity;

        return $this;
    }

    /**
     * Gets allocatedQuantity
     *
     * @return int|null
     */
    public function getAllocatedQuantity()
    {
        return $this->container['allocatedQuantity'];
    }

    /**
     * Sets allocatedQuantity
     *
     * @param int|null $allocatedQuantity Quantity pending customer order
     *
     * @return self
     */
    public function setAllocatedQuantity($allocatedQuantity)
    {
        if (is_null($allocatedQuantity)) {
            throw new \InvalidArgumentException('non-nullable allocatedQuantity cannot be null');
        }
        $this->container['allocatedQuantity'] = $allocatedQuantity;

        return $this;
    }

    /**
     * Gets inTransitQuantity
     *
     * @return int|null
     */
    public function getInTransitQuantity()
    {
        return $this->container['inTransitQuantity'];
    }

    /**
     * Sets inTransitQuantity
     *
     * @param int|null $inTransitQuantity Quantity in transit / 'transshipment' (Amazon)
     *
     * @return self
     */
    public function setInTransitQuantity($inTransitQuantity)
    {
        if (is_null($inTransitQuantity)) {
            throw new \InvalidArgumentException('non-nullable inTransitQuantity cannot be null');
        }
        $this->container['inTransitQuantity'] = $inTransitQuantity;

        return $this;
    }

    /**
     * Gets fulfillmentCenterProcessingQuantity
     *
     * @return int|null
     */
    public function getFulfillmentCenterProcessingQuantity()
    {
        return $this->container['fulfillmentCenterProcessingQuantity'];
    }

    /**
     * Sets fulfillmentCenterProcessingQuantity
     *
     * @param int|null $fulfillmentCenterProcessingQuantity Quantity that is in processing at the fulfillment warehouse (center)
     *
     * @return self
     */
    public function setFulfillmentCenterProcessingQuantity($fulfillmentCenterProcessingQuantity)
    {
        if (is_null($fulfillmentCenterProcessingQuantity)) {
            throw new \InvalidArgumentException('non-nullable fulfillmentCenterProcessingQuantity cannot be null');
        }
        $this->container['fulfillmentCenterProcessingQuantity'] = $fulfillmentCenterProcessingQuantity;

        return $this;
    }

    /**
     * Gets defectiveQuantity
     *
     * @return int|null
     */
    public function getDefectiveQuantity()
    {
        return $this->container['defectiveQuantity'];
    }

    /**
     * Sets defectiveQuantity
     *
     * @param int|null $defectiveQuantity The number of units in defective disposition.
     *
     * @return self
     */
    public function setDefectiveQuantity($defectiveQuantity)
    {
        if (is_null($defectiveQuantity)) {
            throw new \InvalidArgumentException('non-nullable defectiveQuantity cannot be null');
        }
        $this->container['defectiveQuantity'] = $defectiveQuantity;

        return $this;
    }

    /**
     * Gets expiredQuantity
     *
     * @return int|null
     */
    public function getExpiredQuantity()
    {
        return $this->container['expiredQuantity'];
    }

    /**
     * Sets expiredQuantity
     *
     * @param int|null $expiredQuantity The number of units in expired disposition.
     *
     * @return self
     */
    public function setExpiredQuantity($expiredQuantity)
    {
        if (is_null($expiredQuantity)) {
            throw new \InvalidArgumentException('non-nullable expiredQuantity cannot be null');
        }
        $this->container['expiredQuantity'] = $expiredQuantity;

        return $this;
    }

    /**
     * Gets warehouseDamagedQuantity
     *
     * @return int|null
     */
    public function getWarehouseDamagedQuantity()
    {
        return $this->container['warehouseDamagedQuantity'];
    }

    /**
     * Sets warehouseDamagedQuantity
     *
     * @param int|null $warehouseDamagedQuantity The number of units in warehouse damaged disposition.
     *
     * @return self
     */
    public function setWarehouseDamagedQuantity($warehouseDamagedQuantity)
    {
        if (is_null($warehouseDamagedQuantity)) {
            throw new \InvalidArgumentException('non-nullable warehouseDamagedQuantity cannot be null');
        }
        $this->container['warehouseDamagedQuantity'] = $warehouseDamagedQuantity;

        return $this;
    }

    /**
     * Gets customerDamagedQuantity
     *
     * @return int|null
     */
    public function getCustomerDamagedQuantity()
    {
        return $this->container['customerDamagedQuantity'];
    }

    /**
     * Sets customerDamagedQuantity
     *
     * @param int|null $customerDamagedQuantity The number of units in customer damaged disposition.
     *
     * @return self
     */
    public function setCustomerDamagedQuantity($customerDamagedQuantity)
    {
        if (is_null($customerDamagedQuantity)) {
            throw new \InvalidArgumentException('non-nullable customerDamagedQuantity cannot be null');
        }
        $this->container['customerDamagedQuantity'] = $customerDamagedQuantity;

        return $this;
    }

    /**
     * Gets carrierDamagedQuantity
     *
     * @return int|null
     */
    public function getCarrierDamagedQuantity()
    {
        return $this->container['carrierDamagedQuantity'];
    }

    /**
     * Sets carrierDamagedQuantity
     *
     * @param int|null $carrierDamagedQuantity The number of units in carrier damaged disposition.
     *
     * @return self
     */
    public function setCarrierDamagedQuantity($carrierDamagedQuantity)
    {
        if (is_null($carrierDamagedQuantity)) {
            throw new \InvalidArgumentException('non-nullable carrierDamagedQuantity cannot be null');
        }
        $this->container['carrierDamagedQuantity'] = $carrierDamagedQuantity;

        return $this;
    }

    /**
     * Gets pendingPickupQuantity
     *
     * @return int|null
     */
    public function getPendingPickupQuantity()
    {
        return $this->container['pendingPickupQuantity'];
    }

    /**
     * Sets pendingPickupQuantity
     *
     * @param int|null $pendingPickupQuantity The number of units in pending pickup disposition.
     *
     * @return self
     */
    public function setPendingPickupQuantity($pendingPickupQuantity)
    {
        if (is_null($pendingPickupQuantity)) {
            throw new \InvalidArgumentException('non-nullable pendingPickupQuantity cannot be null');
        }
        $this->container['pendingPickupQuantity'] = $pendingPickupQuantity;

        return $this;
    }

    /**
     * Gets inboundQuantity
     *
     * @return int|null
     */
    public function getInboundQuantity()
    {
        return $this->container['inboundQuantity'];
    }

    /**
     * Sets inboundQuantity
     *
     * @param int|null $inboundQuantity Total quantity that is inbound (in inbound [aka fulfillment] shipment from the seller to the fulfillment warehouse)
     *
     * @return self
     */
    public function setInboundQuantity($inboundQuantity)
    {
        if (is_null($inboundQuantity)) {
            throw new \InvalidArgumentException('non-nullable inboundQuantity cannot be null');
        }
        $this->container['inboundQuantity'] = $inboundQuantity;

        return $this;
    }

    /**
     * Gets returnQuantity
     *
     * @return int|null
     */
    public function getReturnQuantity()
    {
        return $this->container['returnQuantity'];
    }

    /**
     * Sets returnQuantity
     *
     * @param int|null $returnQuantity Total quantity in on going returns
     *
     * @return self
     */
    public function setReturnQuantity($returnQuantity)
    {
        if (is_null($returnQuantity)) {
            throw new \InvalidArgumentException('non-nullable returnQuantity cannot be null');
        }
        $this->container['returnQuantity'] = $returnQuantity;

        return $this;
    }

    /**
     * Gets researchingQuantity
     *
     * @return int|null
     */
    public function getResearchingQuantity()
    {
        return $this->container['researchingQuantity'];
    }

    /**
     * Sets researchingQuantity
     *
     * @param int|null $researchingQuantity Quantity that is being researched
     *
     * @return self
     */
    public function setResearchingQuantity($researchingQuantity)
    {
        if (is_null($researchingQuantity)) {
            throw new \InvalidArgumentException('non-nullable researchingQuantity cannot be null');
        }
        $this->container['researchingQuantity'] = $researchingQuantity;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt The timestamp of the last stock update for the stock location.
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            throw new \InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


