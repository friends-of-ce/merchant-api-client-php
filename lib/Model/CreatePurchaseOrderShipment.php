<?php
/**
 * CreatePurchaseOrderShipment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FriendsOfCE\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.15.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FriendsOfCE\Merchant\ApiClient\Model;

use \ArrayAccess;
use \FriendsOfCE\Merchant\ApiClient\ObjectSerializer;

/**
 * CreatePurchaseOrderShipment Class Doc Comment
 *
 * @category Class
 * @package  FriendsOfCE\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreatePurchaseOrderShipment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreatePurchaseOrderShipment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'carrierShipmentNo' => 'string',
        'carrierName' => 'string',
        'merchantShipmentNo' => 'string',
        'shipmentType' => '\FriendsOfCE\Merchant\ApiClient\Model\ShipmentType',
        'shippedDate' => '\DateTime',
        'estimatedDeliveryDate' => '\DateTime',
        'sellingPartyId' => 'string',
        'shipToPartyId' => 'string',
        'billOfLadingNumber' => 'string',
        'shipmentWeightUnitOfMeasure' => '\FriendsOfCE\Merchant\ApiClient\Model\WeightUnitOfMeasure',
        'shipmentWeight' => 'float',
        'shipmentVolumeUnitOfMeasure' => '\FriendsOfCE\Merchant\ApiClient\Model\VolumeUnitOfMeasure',
        'shipmentVolume' => 'float',
        'lines' => '\FriendsOfCE\Merchant\ApiClient\Model\ChangePurchaseOrderShipmentLine[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'carrierShipmentNo' => null,
        'carrierName' => null,
        'merchantShipmentNo' => null,
        'shipmentType' => null,
        'shippedDate' => 'date-time',
        'estimatedDeliveryDate' => 'date-time',
        'sellingPartyId' => null,
        'shipToPartyId' => null,
        'billOfLadingNumber' => null,
        'shipmentWeightUnitOfMeasure' => null,
        'shipmentWeight' => 'decimal',
        'shipmentVolumeUnitOfMeasure' => null,
        'shipmentVolume' => 'decimal',
        'lines' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'carrierShipmentNo' => true,
        'carrierName' => true,
        'merchantShipmentNo' => true,
        'shipmentType' => false,
        'shippedDate' => false,
        'estimatedDeliveryDate' => false,
        'sellingPartyId' => true,
        'shipToPartyId' => true,
        'billOfLadingNumber' => true,
        'shipmentWeightUnitOfMeasure' => false,
        'shipmentWeight' => true,
        'shipmentVolumeUnitOfMeasure' => false,
        'shipmentVolume' => true,
        'lines' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'carrierShipmentNo' => 'CarrierShipmentNo',
        'carrierName' => 'CarrierName',
        'merchantShipmentNo' => 'MerchantShipmentNo',
        'shipmentType' => 'ShipmentType',
        'shippedDate' => 'ShippedDate',
        'estimatedDeliveryDate' => 'EstimatedDeliveryDate',
        'sellingPartyId' => 'SellingPartyId',
        'shipToPartyId' => 'ShipToPartyId',
        'billOfLadingNumber' => 'BillOfLadingNumber',
        'shipmentWeightUnitOfMeasure' => 'ShipmentWeightUnitOfMeasure',
        'shipmentWeight' => 'ShipmentWeight',
        'shipmentVolumeUnitOfMeasure' => 'ShipmentVolumeUnitOfMeasure',
        'shipmentVolume' => 'ShipmentVolume',
        'lines' => 'Lines'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'carrierShipmentNo' => 'setCarrierShipmentNo',
        'carrierName' => 'setCarrierName',
        'merchantShipmentNo' => 'setMerchantShipmentNo',
        'shipmentType' => 'setShipmentType',
        'shippedDate' => 'setShippedDate',
        'estimatedDeliveryDate' => 'setEstimatedDeliveryDate',
        'sellingPartyId' => 'setSellingPartyId',
        'shipToPartyId' => 'setShipToPartyId',
        'billOfLadingNumber' => 'setBillOfLadingNumber',
        'shipmentWeightUnitOfMeasure' => 'setShipmentWeightUnitOfMeasure',
        'shipmentWeight' => 'setShipmentWeight',
        'shipmentVolumeUnitOfMeasure' => 'setShipmentVolumeUnitOfMeasure',
        'shipmentVolume' => 'setShipmentVolume',
        'lines' => 'setLines'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'carrierShipmentNo' => 'getCarrierShipmentNo',
        'carrierName' => 'getCarrierName',
        'merchantShipmentNo' => 'getMerchantShipmentNo',
        'shipmentType' => 'getShipmentType',
        'shippedDate' => 'getShippedDate',
        'estimatedDeliveryDate' => 'getEstimatedDeliveryDate',
        'sellingPartyId' => 'getSellingPartyId',
        'shipToPartyId' => 'getShipToPartyId',
        'billOfLadingNumber' => 'getBillOfLadingNumber',
        'shipmentWeightUnitOfMeasure' => 'getShipmentWeightUnitOfMeasure',
        'shipmentWeight' => 'getShipmentWeight',
        'shipmentVolumeUnitOfMeasure' => 'getShipmentVolumeUnitOfMeasure',
        'shipmentVolume' => 'getShipmentVolume',
        'lines' => 'getLines'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('carrierShipmentNo', $data ?? [], null);
        $this->setIfExists('carrierName', $data ?? [], null);
        $this->setIfExists('merchantShipmentNo', $data ?? [], null);
        $this->setIfExists('shipmentType', $data ?? [], null);
        $this->setIfExists('shippedDate', $data ?? [], null);
        $this->setIfExists('estimatedDeliveryDate', $data ?? [], null);
        $this->setIfExists('sellingPartyId', $data ?? [], null);
        $this->setIfExists('shipToPartyId', $data ?? [], null);
        $this->setIfExists('billOfLadingNumber', $data ?? [], null);
        $this->setIfExists('shipmentWeightUnitOfMeasure', $data ?? [], null);
        $this->setIfExists('shipmentWeight', $data ?? [], null);
        $this->setIfExists('shipmentVolumeUnitOfMeasure', $data ?? [], null);
        $this->setIfExists('shipmentVolume', $data ?? [], null);
        $this->setIfExists('lines', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['carrierShipmentNo']) && (mb_strlen($this->container['carrierShipmentNo']) > 64)) {
            $invalidProperties[] = "invalid value for 'carrierShipmentNo', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['carrierShipmentNo']) && (mb_strlen($this->container['carrierShipmentNo']) < 0)) {
            $invalidProperties[] = "invalid value for 'carrierShipmentNo', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['carrierName']) && (mb_strlen($this->container['carrierName']) > 64)) {
            $invalidProperties[] = "invalid value for 'carrierName', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['carrierName']) && (mb_strlen($this->container['carrierName']) < 0)) {
            $invalidProperties[] = "invalid value for 'carrierName', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['merchantShipmentNo']) && (mb_strlen($this->container['merchantShipmentNo']) > 64)) {
            $invalidProperties[] = "invalid value for 'merchantShipmentNo', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['merchantShipmentNo']) && (mb_strlen($this->container['merchantShipmentNo']) < 0)) {
            $invalidProperties[] = "invalid value for 'merchantShipmentNo', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['sellingPartyId']) && (mb_strlen($this->container['sellingPartyId']) > 50)) {
            $invalidProperties[] = "invalid value for 'sellingPartyId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['sellingPartyId']) && (mb_strlen($this->container['sellingPartyId']) < 0)) {
            $invalidProperties[] = "invalid value for 'sellingPartyId', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shipToPartyId']) && (mb_strlen($this->container['shipToPartyId']) > 50)) {
            $invalidProperties[] = "invalid value for 'shipToPartyId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['shipToPartyId']) && (mb_strlen($this->container['shipToPartyId']) < 0)) {
            $invalidProperties[] = "invalid value for 'shipToPartyId', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['billOfLadingNumber']) && (mb_strlen($this->container['billOfLadingNumber']) > 64)) {
            $invalidProperties[] = "invalid value for 'billOfLadingNumber', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['billOfLadingNumber']) && (mb_strlen($this->container['billOfLadingNumber']) < 0)) {
            $invalidProperties[] = "invalid value for 'billOfLadingNumber', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets carrierShipmentNo
     *
     * @return string|null
     */
    public function getCarrierShipmentNo()
    {
        return $this->container['carrierShipmentNo'];
    }

    /**
     * Sets carrierShipmentNo
     *
     * @param string|null $carrierShipmentNo The field is also known as PRO number is a unique number assigned by the carrier.  It is used to identify and track the shipment that goes out for delivery.  This field is mandatory for US, CA, MX shipment confirmations of Amazon Vendor
     *
     * @return self
     */
    public function setCarrierShipmentNo($carrierShipmentNo)
    {
        if (is_null($carrierShipmentNo)) {
            array_push($this->openAPINullablesSetToNull, 'carrierShipmentNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('carrierShipmentNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($carrierShipmentNo) && (mb_strlen($carrierShipmentNo) > 64)) {
            throw new \InvalidArgumentException('invalid length for $carrierShipmentNo when calling CreatePurchaseOrderShipment., must be smaller than or equal to 64.');
        }
        if (!is_null($carrierShipmentNo) && (mb_strlen($carrierShipmentNo) < 0)) {
            throw new \InvalidArgumentException('invalid length for $carrierShipmentNo when calling CreatePurchaseOrderShipment., must be bigger than or equal to 0.');
        }

        $this->container['carrierShipmentNo'] = $carrierShipmentNo;

        return $this;
    }

    /**
     * Gets carrierName
     *
     * @return string|null
     */
    public function getCarrierName()
    {
        return $this->container['carrierName'];
    }

    /**
     * Sets carrierName
     *
     * @param string|null $carrierName Name of the carrier
     *
     * @return self
     */
    public function setCarrierName($carrierName)
    {
        if (is_null($carrierName)) {
            array_push($this->openAPINullablesSetToNull, 'carrierName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('carrierName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($carrierName) && (mb_strlen($carrierName) > 64)) {
            throw new \InvalidArgumentException('invalid length for $carrierName when calling CreatePurchaseOrderShipment., must be smaller than or equal to 64.');
        }
        if (!is_null($carrierName) && (mb_strlen($carrierName) < 0)) {
            throw new \InvalidArgumentException('invalid length for $carrierName when calling CreatePurchaseOrderShipment., must be bigger than or equal to 0.');
        }

        $this->container['carrierName'] = $carrierName;

        return $this;
    }

    /**
     * Gets merchantShipmentNo
     *
     * @return string|null
     */
    public function getMerchantShipmentNo()
    {
        return $this->container['merchantShipmentNo'];
    }

    /**
     * Sets merchantShipmentNo
     *
     * @param string|null $merchantShipmentNo The number the merchant uses to identify this PO shipment
     *
     * @return self
     */
    public function setMerchantShipmentNo($merchantShipmentNo)
    {
        if (is_null($merchantShipmentNo)) {
            array_push($this->openAPINullablesSetToNull, 'merchantShipmentNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantShipmentNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($merchantShipmentNo) && (mb_strlen($merchantShipmentNo) > 64)) {
            throw new \InvalidArgumentException('invalid length for $merchantShipmentNo when calling CreatePurchaseOrderShipment., must be smaller than or equal to 64.');
        }
        if (!is_null($merchantShipmentNo) && (mb_strlen($merchantShipmentNo) < 0)) {
            throw new \InvalidArgumentException('invalid length for $merchantShipmentNo when calling CreatePurchaseOrderShipment., must be bigger than or equal to 0.');
        }

        $this->container['merchantShipmentNo'] = $merchantShipmentNo;

        return $this;
    }

    /**
     * Gets shipmentType
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\ShipmentType|null
     */
    public function getShipmentType()
    {
        return $this->container['shipmentType'];
    }

    /**
     * Sets shipmentType
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\ShipmentType|null $shipmentType shipmentType
     *
     * @return self
     */
    public function setShipmentType($shipmentType)
    {
        if (is_null($shipmentType)) {
            throw new \InvalidArgumentException('non-nullable shipmentType cannot be null');
        }
        $this->container['shipmentType'] = $shipmentType;

        return $this;
    }

    /**
     * Gets shippedDate
     *
     * @return \DateTime|null
     */
    public function getShippedDate()
    {
        return $this->container['shippedDate'];
    }

    /**
     * Sets shippedDate
     *
     * @param \DateTime|null $shippedDate When the shipment will be/was shipped
     *
     * @return self
     */
    public function setShippedDate($shippedDate)
    {
        if (is_null($shippedDate)) {
            throw new \InvalidArgumentException('non-nullable shippedDate cannot be null');
        }
        $this->container['shippedDate'] = $shippedDate;

        return $this;
    }

    /**
     * Gets estimatedDeliveryDate
     *
     * @return \DateTime|null
     */
    public function getEstimatedDeliveryDate()
    {
        return $this->container['estimatedDeliveryDate'];
    }

    /**
     * Sets estimatedDeliveryDate
     *
     * @param \DateTime|null $estimatedDeliveryDate Estimated delivery time in the channel's warehouse
     *
     * @return self
     */
    public function setEstimatedDeliveryDate($estimatedDeliveryDate)
    {
        if (is_null($estimatedDeliveryDate)) {
            throw new \InvalidArgumentException('non-nullable estimatedDeliveryDate cannot be null');
        }
        $this->container['estimatedDeliveryDate'] = $estimatedDeliveryDate;

        return $this;
    }

    /**
     * Gets sellingPartyId
     *
     * @return string|null
     */
    public function getSellingPartyId()
    {
        return $this->container['sellingPartyId'];
    }

    /**
     * Sets sellingPartyId
     *
     * @param string|null $sellingPartyId The merchant's identifying 'selling party number' at the channel
     *
     * @return self
     */
    public function setSellingPartyId($sellingPartyId)
    {
        if (is_null($sellingPartyId)) {
            array_push($this->openAPINullablesSetToNull, 'sellingPartyId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sellingPartyId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sellingPartyId) && (mb_strlen($sellingPartyId) > 50)) {
            throw new \InvalidArgumentException('invalid length for $sellingPartyId when calling CreatePurchaseOrderShipment., must be smaller than or equal to 50.');
        }
        if (!is_null($sellingPartyId) && (mb_strlen($sellingPartyId) < 0)) {
            throw new \InvalidArgumentException('invalid length for $sellingPartyId when calling CreatePurchaseOrderShipment., must be bigger than or equal to 0.');
        }

        $this->container['sellingPartyId'] = $sellingPartyId;

        return $this;
    }

    /**
     * Gets shipToPartyId
     *
     * @return string|null
     */
    public function getShipToPartyId()
    {
        return $this->container['shipToPartyId'];
    }

    /**
     * Sets shipToPartyId
     *
     * @param string|null $shipToPartyId The destination's 'ship to party' number at the channel
     *
     * @return self
     */
    public function setShipToPartyId($shipToPartyId)
    {
        if (is_null($shipToPartyId)) {
            array_push($this->openAPINullablesSetToNull, 'shipToPartyId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipToPartyId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shipToPartyId) && (mb_strlen($shipToPartyId) > 50)) {
            throw new \InvalidArgumentException('invalid length for $shipToPartyId when calling CreatePurchaseOrderShipment., must be smaller than or equal to 50.');
        }
        if (!is_null($shipToPartyId) && (mb_strlen($shipToPartyId) < 0)) {
            throw new \InvalidArgumentException('invalid length for $shipToPartyId when calling CreatePurchaseOrderShipment., must be bigger than or equal to 0.');
        }

        $this->container['shipToPartyId'] = $shipToPartyId;

        return $this;
    }

    /**
     * Gets billOfLadingNumber
     *
     * @return string|null
     */
    public function getBillOfLadingNumber()
    {
        return $this->container['billOfLadingNumber'];
    }

    /**
     * Sets billOfLadingNumber
     *
     * @param string|null $billOfLadingNumber Bill Of Lading (BOL) number is the unique number assigned by the vendor. The BOL present in the Shipment Confirmation message ideally matches the paper BOL provided with the shipment, but that is no must. Instead of BOL, an alternative reference number (like Delivery Note Number) for the shipment can also be sent in this field.
     *
     * @return self
     */
    public function setBillOfLadingNumber($billOfLadingNumber)
    {
        if (is_null($billOfLadingNumber)) {
            array_push($this->openAPINullablesSetToNull, 'billOfLadingNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billOfLadingNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($billOfLadingNumber) && (mb_strlen($billOfLadingNumber) > 64)) {
            throw new \InvalidArgumentException('invalid length for $billOfLadingNumber when calling CreatePurchaseOrderShipment., must be smaller than or equal to 64.');
        }
        if (!is_null($billOfLadingNumber) && (mb_strlen($billOfLadingNumber) < 0)) {
            throw new \InvalidArgumentException('invalid length for $billOfLadingNumber when calling CreatePurchaseOrderShipment., must be bigger than or equal to 0.');
        }

        $this->container['billOfLadingNumber'] = $billOfLadingNumber;

        return $this;
    }

    /**
     * Gets shipmentWeightUnitOfMeasure
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\WeightUnitOfMeasure|null
     */
    public function getShipmentWeightUnitOfMeasure()
    {
        return $this->container['shipmentWeightUnitOfMeasure'];
    }

    /**
     * Sets shipmentWeightUnitOfMeasure
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\WeightUnitOfMeasure|null $shipmentWeightUnitOfMeasure shipmentWeightUnitOfMeasure
     *
     * @return self
     */
    public function setShipmentWeightUnitOfMeasure($shipmentWeightUnitOfMeasure)
    {
        if (is_null($shipmentWeightUnitOfMeasure)) {
            throw new \InvalidArgumentException('non-nullable shipmentWeightUnitOfMeasure cannot be null');
        }
        $this->container['shipmentWeightUnitOfMeasure'] = $shipmentWeightUnitOfMeasure;

        return $this;
    }

    /**
     * Gets shipmentWeight
     *
     * @return float|null
     */
    public function getShipmentWeight()
    {
        return $this->container['shipmentWeight'];
    }

    /**
     * Sets shipmentWeight
     *
     * @param float|null $shipmentWeight The shipment's weight
     *
     * @return self
     */
    public function setShipmentWeight($shipmentWeight)
    {
        if (is_null($shipmentWeight)) {
            array_push($this->openAPINullablesSetToNull, 'shipmentWeight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipmentWeight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipmentWeight'] = $shipmentWeight;

        return $this;
    }

    /**
     * Gets shipmentVolumeUnitOfMeasure
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\VolumeUnitOfMeasure|null
     */
    public function getShipmentVolumeUnitOfMeasure()
    {
        return $this->container['shipmentVolumeUnitOfMeasure'];
    }

    /**
     * Sets shipmentVolumeUnitOfMeasure
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\VolumeUnitOfMeasure|null $shipmentVolumeUnitOfMeasure shipmentVolumeUnitOfMeasure
     *
     * @return self
     */
    public function setShipmentVolumeUnitOfMeasure($shipmentVolumeUnitOfMeasure)
    {
        if (is_null($shipmentVolumeUnitOfMeasure)) {
            throw new \InvalidArgumentException('non-nullable shipmentVolumeUnitOfMeasure cannot be null');
        }
        $this->container['shipmentVolumeUnitOfMeasure'] = $shipmentVolumeUnitOfMeasure;

        return $this;
    }

    /**
     * Gets shipmentVolume
     *
     * @return float|null
     */
    public function getShipmentVolume()
    {
        return $this->container['shipmentVolume'];
    }

    /**
     * Sets shipmentVolume
     *
     * @param float|null $shipmentVolume The shipment's volume
     *
     * @return self
     */
    public function setShipmentVolume($shipmentVolume)
    {
        if (is_null($shipmentVolume)) {
            array_push($this->openAPINullablesSetToNull, 'shipmentVolume');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipmentVolume', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipmentVolume'] = $shipmentVolume;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\ChangePurchaseOrderShipmentLine[]|null
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\ChangePurchaseOrderShipmentLine[]|null $lines Shipment information for each shipped product
     *
     * @return self
     */
    public function setLines($lines)
    {
        if (is_null($lines)) {
            array_push($this->openAPINullablesSetToNull, 'lines');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lines', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lines'] = $lines;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


