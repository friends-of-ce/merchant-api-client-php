<?php
/**
 * AdvanceSettingsResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FriendsOfCE\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.15.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FriendsOfCE\Merchant\ApiClient\Model;

use \ArrayAccess;
use \FriendsOfCE\Merchant\ApiClient\ObjectSerializer;

/**
 * AdvanceSettingsResponse Class Doc Comment
 *
 * @category Class
 * @package  FriendsOfCE\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AdvanceSettingsResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdvanceSettingsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'manageStock' => 'bool',
        'disableAddressValidation' => 'bool',
        'skipHouseNumberValidation' => 'bool',
        'skipHouseNumberValidationForCountryCodes' => 'string[]',
        'setOrdersToClosedOnImport' => 'bool',
        'disableStockReservation' => 'bool',
        'disableAutoOrderCancellation' => 'bool',
        'automaticallySetPhoneNumberIfEmpty' => 'string',
        'defaultVatRate' => 'float',
        'orderTooLongOnNewHoursOffset' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'manageStock' => null,
        'disableAddressValidation' => null,
        'skipHouseNumberValidation' => null,
        'skipHouseNumberValidationForCountryCodes' => null,
        'setOrdersToClosedOnImport' => null,
        'disableStockReservation' => null,
        'disableAutoOrderCancellation' => null,
        'automaticallySetPhoneNumberIfEmpty' => null,
        'defaultVatRate' => 'decimal',
        'orderTooLongOnNewHoursOffset' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'manageStock' => false,
        'disableAddressValidation' => false,
        'skipHouseNumberValidation' => false,
        'skipHouseNumberValidationForCountryCodes' => true,
        'setOrdersToClosedOnImport' => false,
        'disableStockReservation' => false,
        'disableAutoOrderCancellation' => false,
        'automaticallySetPhoneNumberIfEmpty' => true,
        'defaultVatRate' => false,
        'orderTooLongOnNewHoursOffset' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'manageStock' => 'ManageStock',
        'disableAddressValidation' => 'DisableAddressValidation',
        'skipHouseNumberValidation' => 'SkipHouseNumberValidation',
        'skipHouseNumberValidationForCountryCodes' => 'SkipHouseNumberValidationForCountryCodes',
        'setOrdersToClosedOnImport' => 'SetOrdersToClosedOnImport',
        'disableStockReservation' => 'DisableStockReservation',
        'disableAutoOrderCancellation' => 'DisableAutoOrderCancellation',
        'automaticallySetPhoneNumberIfEmpty' => 'AutomaticallySetPhoneNumberIfEmpty',
        'defaultVatRate' => 'DefaultVatRate',
        'orderTooLongOnNewHoursOffset' => 'OrderTooLongOnNewHoursOffset'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'manageStock' => 'setManageStock',
        'disableAddressValidation' => 'setDisableAddressValidation',
        'skipHouseNumberValidation' => 'setSkipHouseNumberValidation',
        'skipHouseNumberValidationForCountryCodes' => 'setSkipHouseNumberValidationForCountryCodes',
        'setOrdersToClosedOnImport' => 'setSetOrdersToClosedOnImport',
        'disableStockReservation' => 'setDisableStockReservation',
        'disableAutoOrderCancellation' => 'setDisableAutoOrderCancellation',
        'automaticallySetPhoneNumberIfEmpty' => 'setAutomaticallySetPhoneNumberIfEmpty',
        'defaultVatRate' => 'setDefaultVatRate',
        'orderTooLongOnNewHoursOffset' => 'setOrderTooLongOnNewHoursOffset'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'manageStock' => 'getManageStock',
        'disableAddressValidation' => 'getDisableAddressValidation',
        'skipHouseNumberValidation' => 'getSkipHouseNumberValidation',
        'skipHouseNumberValidationForCountryCodes' => 'getSkipHouseNumberValidationForCountryCodes',
        'setOrdersToClosedOnImport' => 'getSetOrdersToClosedOnImport',
        'disableStockReservation' => 'getDisableStockReservation',
        'disableAutoOrderCancellation' => 'getDisableAutoOrderCancellation',
        'automaticallySetPhoneNumberIfEmpty' => 'getAutomaticallySetPhoneNumberIfEmpty',
        'defaultVatRate' => 'getDefaultVatRate',
        'orderTooLongOnNewHoursOffset' => 'getOrderTooLongOnNewHoursOffset'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('manageStock', $data ?? [], null);
        $this->setIfExists('disableAddressValidation', $data ?? [], null);
        $this->setIfExists('skipHouseNumberValidation', $data ?? [], null);
        $this->setIfExists('skipHouseNumberValidationForCountryCodes', $data ?? [], null);
        $this->setIfExists('setOrdersToClosedOnImport', $data ?? [], null);
        $this->setIfExists('disableStockReservation', $data ?? [], null);
        $this->setIfExists('disableAutoOrderCancellation', $data ?? [], null);
        $this->setIfExists('automaticallySetPhoneNumberIfEmpty', $data ?? [], null);
        $this->setIfExists('defaultVatRate', $data ?? [], null);
        $this->setIfExists('orderTooLongOnNewHoursOffset', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets manageStock
     *
     * @return bool|null
     */
    public function getManageStock()
    {
        return $this->container['manageStock'];
    }

    /**
     * Sets manageStock
     *
     * @param bool|null $manageStock manageStock
     *
     * @return self
     */
    public function setManageStock($manageStock)
    {
        if (is_null($manageStock)) {
            throw new \InvalidArgumentException('non-nullable manageStock cannot be null');
        }
        $this->container['manageStock'] = $manageStock;

        return $this;
    }

    /**
     * Gets disableAddressValidation
     *
     * @return bool|null
     */
    public function getDisableAddressValidation()
    {
        return $this->container['disableAddressValidation'];
    }

    /**
     * Sets disableAddressValidation
     *
     * @param bool|null $disableAddressValidation disableAddressValidation
     *
     * @return self
     */
    public function setDisableAddressValidation($disableAddressValidation)
    {
        if (is_null($disableAddressValidation)) {
            throw new \InvalidArgumentException('non-nullable disableAddressValidation cannot be null');
        }
        $this->container['disableAddressValidation'] = $disableAddressValidation;

        return $this;
    }

    /**
     * Gets skipHouseNumberValidation
     *
     * @return bool|null
     */
    public function getSkipHouseNumberValidation()
    {
        return $this->container['skipHouseNumberValidation'];
    }

    /**
     * Sets skipHouseNumberValidation
     *
     * @param bool|null $skipHouseNumberValidation skipHouseNumberValidation
     *
     * @return self
     */
    public function setSkipHouseNumberValidation($skipHouseNumberValidation)
    {
        if (is_null($skipHouseNumberValidation)) {
            throw new \InvalidArgumentException('non-nullable skipHouseNumberValidation cannot be null');
        }
        $this->container['skipHouseNumberValidation'] = $skipHouseNumberValidation;

        return $this;
    }

    /**
     * Gets skipHouseNumberValidationForCountryCodes
     *
     * @return string[]|null
     */
    public function getSkipHouseNumberValidationForCountryCodes()
    {
        return $this->container['skipHouseNumberValidationForCountryCodes'];
    }

    /**
     * Sets skipHouseNumberValidationForCountryCodes
     *
     * @param string[]|null $skipHouseNumberValidationForCountryCodes skipHouseNumberValidationForCountryCodes
     *
     * @return self
     */
    public function setSkipHouseNumberValidationForCountryCodes($skipHouseNumberValidationForCountryCodes)
    {
        if (is_null($skipHouseNumberValidationForCountryCodes)) {
            array_push($this->openAPINullablesSetToNull, 'skipHouseNumberValidationForCountryCodes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('skipHouseNumberValidationForCountryCodes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['skipHouseNumberValidationForCountryCodes'] = $skipHouseNumberValidationForCountryCodes;

        return $this;
    }

    /**
     * Gets setOrdersToClosedOnImport
     *
     * @return bool|null
     */
    public function getSetOrdersToClosedOnImport()
    {
        return $this->container['setOrdersToClosedOnImport'];
    }

    /**
     * Sets setOrdersToClosedOnImport
     *
     * @param bool|null $setOrdersToClosedOnImport setOrdersToClosedOnImport
     *
     * @return self
     */
    public function setSetOrdersToClosedOnImport($setOrdersToClosedOnImport)
    {
        if (is_null($setOrdersToClosedOnImport)) {
            throw new \InvalidArgumentException('non-nullable setOrdersToClosedOnImport cannot be null');
        }
        $this->container['setOrdersToClosedOnImport'] = $setOrdersToClosedOnImport;

        return $this;
    }

    /**
     * Gets disableStockReservation
     *
     * @return bool|null
     */
    public function getDisableStockReservation()
    {
        return $this->container['disableStockReservation'];
    }

    /**
     * Sets disableStockReservation
     *
     * @param bool|null $disableStockReservation disableStockReservation
     *
     * @return self
     */
    public function setDisableStockReservation($disableStockReservation)
    {
        if (is_null($disableStockReservation)) {
            throw new \InvalidArgumentException('non-nullable disableStockReservation cannot be null');
        }
        $this->container['disableStockReservation'] = $disableStockReservation;

        return $this;
    }

    /**
     * Gets disableAutoOrderCancellation
     *
     * @return bool|null
     */
    public function getDisableAutoOrderCancellation()
    {
        return $this->container['disableAutoOrderCancellation'];
    }

    /**
     * Sets disableAutoOrderCancellation
     *
     * @param bool|null $disableAutoOrderCancellation disableAutoOrderCancellation
     *
     * @return self
     */
    public function setDisableAutoOrderCancellation($disableAutoOrderCancellation)
    {
        if (is_null($disableAutoOrderCancellation)) {
            throw new \InvalidArgumentException('non-nullable disableAutoOrderCancellation cannot be null');
        }
        $this->container['disableAutoOrderCancellation'] = $disableAutoOrderCancellation;

        return $this;
    }

    /**
     * Gets automaticallySetPhoneNumberIfEmpty
     *
     * @return string|null
     */
    public function getAutomaticallySetPhoneNumberIfEmpty()
    {
        return $this->container['automaticallySetPhoneNumberIfEmpty'];
    }

    /**
     * Sets automaticallySetPhoneNumberIfEmpty
     *
     * @param string|null $automaticallySetPhoneNumberIfEmpty automaticallySetPhoneNumberIfEmpty
     *
     * @return self
     */
    public function setAutomaticallySetPhoneNumberIfEmpty($automaticallySetPhoneNumberIfEmpty)
    {
        if (is_null($automaticallySetPhoneNumberIfEmpty)) {
            array_push($this->openAPINullablesSetToNull, 'automaticallySetPhoneNumberIfEmpty');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('automaticallySetPhoneNumberIfEmpty', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['automaticallySetPhoneNumberIfEmpty'] = $automaticallySetPhoneNumberIfEmpty;

        return $this;
    }

    /**
     * Gets defaultVatRate
     *
     * @return float|null
     */
    public function getDefaultVatRate()
    {
        return $this->container['defaultVatRate'];
    }

    /**
     * Sets defaultVatRate
     *
     * @param float|null $defaultVatRate defaultVatRate
     *
     * @return self
     */
    public function setDefaultVatRate($defaultVatRate)
    {
        if (is_null($defaultVatRate)) {
            throw new \InvalidArgumentException('non-nullable defaultVatRate cannot be null');
        }
        $this->container['defaultVatRate'] = $defaultVatRate;

        return $this;
    }

    /**
     * Gets orderTooLongOnNewHoursOffset
     *
     * @return int|null
     */
    public function getOrderTooLongOnNewHoursOffset()
    {
        return $this->container['orderTooLongOnNewHoursOffset'];
    }

    /**
     * Sets orderTooLongOnNewHoursOffset
     *
     * @param int|null $orderTooLongOnNewHoursOffset orderTooLongOnNewHoursOffset
     *
     * @return self
     */
    public function setOrderTooLongOnNewHoursOffset($orderTooLongOnNewHoursOffset)
    {
        if (is_null($orderTooLongOnNewHoursOffset)) {
            throw new \InvalidArgumentException('non-nullable orderTooLongOnNewHoursOffset cannot be null');
        }
        $this->container['orderTooLongOnNewHoursOffset'] = $orderTooLongOnNewHoursOffset;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


