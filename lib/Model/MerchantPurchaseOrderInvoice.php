<?php
/**
 * MerchantPurchaseOrderInvoice
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FriendsOfCE\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.15.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FriendsOfCE\Merchant\ApiClient\Model;

use \ArrayAccess;
use \FriendsOfCE\Merchant\ApiClient\ObjectSerializer;

/**
 * MerchantPurchaseOrderInvoice Class Doc Comment
 *
 * @category Class
 * @package  FriendsOfCE\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MerchantPurchaseOrderInvoice implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MerchantPurchaseOrderInvoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'invoiceNo' => 'string',
        'invoiceType' => '\FriendsOfCE\Merchant\ApiClient\Model\ModulesPurchaseOrderInvoiceType',
        'invoiceTotalAmount' => 'float',
        'invoiceTotalCurrencyCode' => 'string',
        'remitToParty' => '\FriendsOfCE\Merchant\ApiClient\Model\MerchantVendorParty',
        'shipToPartyId' => 'int',
        'billToPartyId' => 'int',
        'additionalDetails' => '\FriendsOfCE\Merchant\ApiClient\Model\PurchaseOrderInvoiceAdditionalDetails[]',
        'lines' => '\FriendsOfCE\Merchant\ApiClient\Model\MerchantPurchaseOrderInvoiceLine[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'invoiceNo' => null,
        'invoiceType' => null,
        'invoiceTotalAmount' => 'decimal',
        'invoiceTotalCurrencyCode' => null,
        'remitToParty' => null,
        'shipToPartyId' => 'int32',
        'billToPartyId' => 'int32',
        'additionalDetails' => null,
        'lines' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'invoiceNo' => true,
        'invoiceType' => false,
        'invoiceTotalAmount' => false,
        'invoiceTotalCurrencyCode' => true,
        'remitToParty' => false,
        'shipToPartyId' => true,
        'billToPartyId' => true,
        'additionalDetails' => true,
        'lines' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoiceNo' => 'InvoiceNo',
        'invoiceType' => 'InvoiceType',
        'invoiceTotalAmount' => 'InvoiceTotalAmount',
        'invoiceTotalCurrencyCode' => 'InvoiceTotalCurrencyCode',
        'remitToParty' => 'RemitToParty',
        'shipToPartyId' => 'ShipToPartyId',
        'billToPartyId' => 'BillToPartyId',
        'additionalDetails' => 'AdditionalDetails',
        'lines' => 'Lines'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoiceNo' => 'setInvoiceNo',
        'invoiceType' => 'setInvoiceType',
        'invoiceTotalAmount' => 'setInvoiceTotalAmount',
        'invoiceTotalCurrencyCode' => 'setInvoiceTotalCurrencyCode',
        'remitToParty' => 'setRemitToParty',
        'shipToPartyId' => 'setShipToPartyId',
        'billToPartyId' => 'setBillToPartyId',
        'additionalDetails' => 'setAdditionalDetails',
        'lines' => 'setLines'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoiceNo' => 'getInvoiceNo',
        'invoiceType' => 'getInvoiceType',
        'invoiceTotalAmount' => 'getInvoiceTotalAmount',
        'invoiceTotalCurrencyCode' => 'getInvoiceTotalCurrencyCode',
        'remitToParty' => 'getRemitToParty',
        'shipToPartyId' => 'getShipToPartyId',
        'billToPartyId' => 'getBillToPartyId',
        'additionalDetails' => 'getAdditionalDetails',
        'lines' => 'getLines'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('invoiceNo', $data ?? [], null);
        $this->setIfExists('invoiceType', $data ?? [], null);
        $this->setIfExists('invoiceTotalAmount', $data ?? [], null);
        $this->setIfExists('invoiceTotalCurrencyCode', $data ?? [], null);
        $this->setIfExists('remitToParty', $data ?? [], null);
        $this->setIfExists('shipToPartyId', $data ?? [], null);
        $this->setIfExists('billToPartyId', $data ?? [], null);
        $this->setIfExists('additionalDetails', $data ?? [], null);
        $this->setIfExists('lines', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoiceNo
     *
     * @return string|null
     */
    public function getInvoiceNo()
    {
        return $this->container['invoiceNo'];
    }

    /**
     * Sets invoiceNo
     *
     * @param string|null $invoiceNo invoiceNo
     *
     * @return self
     */
    public function setInvoiceNo($invoiceNo)
    {
        if (is_null($invoiceNo)) {
            array_push($this->openAPINullablesSetToNull, 'invoiceNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoiceNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoiceNo'] = $invoiceNo;

        return $this;
    }

    /**
     * Gets invoiceType
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\ModulesPurchaseOrderInvoiceType|null
     */
    public function getInvoiceType()
    {
        return $this->container['invoiceType'];
    }

    /**
     * Sets invoiceType
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\ModulesPurchaseOrderInvoiceType|null $invoiceType invoiceType
     *
     * @return self
     */
    public function setInvoiceType($invoiceType)
    {
        if (is_null($invoiceType)) {
            throw new \InvalidArgumentException('non-nullable invoiceType cannot be null');
        }
        $this->container['invoiceType'] = $invoiceType;

        return $this;
    }

    /**
     * Gets invoiceTotalAmount
     *
     * @return float|null
     */
    public function getInvoiceTotalAmount()
    {
        return $this->container['invoiceTotalAmount'];
    }

    /**
     * Sets invoiceTotalAmount
     *
     * @param float|null $invoiceTotalAmount invoiceTotalAmount
     *
     * @return self
     */
    public function setInvoiceTotalAmount($invoiceTotalAmount)
    {
        if (is_null($invoiceTotalAmount)) {
            throw new \InvalidArgumentException('non-nullable invoiceTotalAmount cannot be null');
        }
        $this->container['invoiceTotalAmount'] = $invoiceTotalAmount;

        return $this;
    }

    /**
     * Gets invoiceTotalCurrencyCode
     *
     * @return string|null
     */
    public function getInvoiceTotalCurrencyCode()
    {
        return $this->container['invoiceTotalCurrencyCode'];
    }

    /**
     * Sets invoiceTotalCurrencyCode
     *
     * @param string|null $invoiceTotalCurrencyCode invoiceTotalCurrencyCode
     *
     * @return self
     */
    public function setInvoiceTotalCurrencyCode($invoiceTotalCurrencyCode)
    {
        if (is_null($invoiceTotalCurrencyCode)) {
            array_push($this->openAPINullablesSetToNull, 'invoiceTotalCurrencyCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoiceTotalCurrencyCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoiceTotalCurrencyCode'] = $invoiceTotalCurrencyCode;

        return $this;
    }

    /**
     * Gets remitToParty
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\MerchantVendorParty|null
     */
    public function getRemitToParty()
    {
        return $this->container['remitToParty'];
    }

    /**
     * Sets remitToParty
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\MerchantVendorParty|null $remitToParty remitToParty
     *
     * @return self
     */
    public function setRemitToParty($remitToParty)
    {
        if (is_null($remitToParty)) {
            throw new \InvalidArgumentException('non-nullable remitToParty cannot be null');
        }
        $this->container['remitToParty'] = $remitToParty;

        return $this;
    }

    /**
     * Gets shipToPartyId
     *
     * @return int|null
     */
    public function getShipToPartyId()
    {
        return $this->container['shipToPartyId'];
    }

    /**
     * Sets shipToPartyId
     *
     * @param int|null $shipToPartyId shipToPartyId
     *
     * @return self
     */
    public function setShipToPartyId($shipToPartyId)
    {
        if (is_null($shipToPartyId)) {
            array_push($this->openAPINullablesSetToNull, 'shipToPartyId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipToPartyId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipToPartyId'] = $shipToPartyId;

        return $this;
    }

    /**
     * Gets billToPartyId
     *
     * @return int|null
     */
    public function getBillToPartyId()
    {
        return $this->container['billToPartyId'];
    }

    /**
     * Sets billToPartyId
     *
     * @param int|null $billToPartyId billToPartyId
     *
     * @return self
     */
    public function setBillToPartyId($billToPartyId)
    {
        if (is_null($billToPartyId)) {
            array_push($this->openAPINullablesSetToNull, 'billToPartyId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billToPartyId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billToPartyId'] = $billToPartyId;

        return $this;
    }

    /**
     * Gets additionalDetails
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\PurchaseOrderInvoiceAdditionalDetails[]|null
     */
    public function getAdditionalDetails()
    {
        return $this->container['additionalDetails'];
    }

    /**
     * Sets additionalDetails
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\PurchaseOrderInvoiceAdditionalDetails[]|null $additionalDetails additionalDetails
     *
     * @return self
     */
    public function setAdditionalDetails($additionalDetails)
    {
        if (is_null($additionalDetails)) {
            array_push($this->openAPINullablesSetToNull, 'additionalDetails');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additionalDetails', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additionalDetails'] = $additionalDetails;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\MerchantPurchaseOrderInvoiceLine[]|null
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\MerchantPurchaseOrderInvoiceLine[]|null $lines lines
     *
     * @return self
     */
    public function setLines($lines)
    {
        if (is_null($lines)) {
            array_push($this->openAPINullablesSetToNull, 'lines');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lines', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lines'] = $lines;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


