<?php
/**
 * MerchantPurchaseOrderInvoiceLine
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FriendsOfCE\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.15.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FriendsOfCE\Merchant\ApiClient\Model;

use \ArrayAccess;
use \FriendsOfCE\Merchant\ApiClient\ObjectSerializer;

/**
 * MerchantPurchaseOrderInvoiceLine Class Doc Comment
 *
 * @category Class
 * @package  FriendsOfCE\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MerchantPurchaseOrderInvoiceLine implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MerchantPurchaseOrderInvoiceLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'channelPurchaseOrderNo' => 'string',
        'merchantPurchaseOrderNo' => 'string',
        'channelProductNo' => 'string',
        'merchantProductNo' => 'string',
        'quantity' => 'int',
        'netCostCurrencyCode' => 'string',
        'netCostAmount' => 'float',
        'hsnCode' => 'string',
        'cnReferenceInvoiceNumber' => 'string',
        'cnDebitNoteNumber' => 'string',
        'cnReturnsReferenceNumber' => 'string',
        'cnRmaId' => 'string',
        'cnGoodsReturnDate' => '\DateTime',
        'cnCoopReferenceNumber' => 'string',
        'cnConsignorsReferenceNumber' => 'string',
        'allowanceDetails' => '\FriendsOfCE\Merchant\ApiClient\Model\PurchaseOrderInvoiceAllowanceDetails[]',
        'taxDetails' => '\FriendsOfCE\Merchant\ApiClient\Model\PurchaseOrderInvoiceTaxDetails[]',
        'chargeDetails' => '\FriendsOfCE\Merchant\ApiClient\Model\PurchaseOrderInvoiceChargeDetails[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'channelPurchaseOrderNo' => null,
        'merchantPurchaseOrderNo' => null,
        'channelProductNo' => null,
        'merchantProductNo' => null,
        'quantity' => 'int32',
        'netCostCurrencyCode' => null,
        'netCostAmount' => 'decimal',
        'hsnCode' => null,
        'cnReferenceInvoiceNumber' => null,
        'cnDebitNoteNumber' => null,
        'cnReturnsReferenceNumber' => null,
        'cnRmaId' => null,
        'cnGoodsReturnDate' => 'date-time',
        'cnCoopReferenceNumber' => null,
        'cnConsignorsReferenceNumber' => null,
        'allowanceDetails' => null,
        'taxDetails' => null,
        'chargeDetails' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'channelPurchaseOrderNo' => true,
        'merchantPurchaseOrderNo' => true,
        'channelProductNo' => true,
        'merchantProductNo' => true,
        'quantity' => false,
        'netCostCurrencyCode' => true,
        'netCostAmount' => false,
        'hsnCode' => true,
        'cnReferenceInvoiceNumber' => true,
        'cnDebitNoteNumber' => true,
        'cnReturnsReferenceNumber' => true,
        'cnRmaId' => true,
        'cnGoodsReturnDate' => false,
        'cnCoopReferenceNumber' => true,
        'cnConsignorsReferenceNumber' => true,
        'allowanceDetails' => true,
        'taxDetails' => true,
        'chargeDetails' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channelPurchaseOrderNo' => 'ChannelPurchaseOrderNo',
        'merchantPurchaseOrderNo' => 'MerchantPurchaseOrderNo',
        'channelProductNo' => 'ChannelProductNo',
        'merchantProductNo' => 'MerchantProductNo',
        'quantity' => 'Quantity',
        'netCostCurrencyCode' => 'NetCostCurrencyCode',
        'netCostAmount' => 'NetCostAmount',
        'hsnCode' => 'HsnCode',
        'cnReferenceInvoiceNumber' => 'CnReferenceInvoiceNumber',
        'cnDebitNoteNumber' => 'CnDebitNoteNumber',
        'cnReturnsReferenceNumber' => 'CnReturnsReferenceNumber',
        'cnRmaId' => 'CnRmaId',
        'cnGoodsReturnDate' => 'CnGoodsReturnDate',
        'cnCoopReferenceNumber' => 'CnCoopReferenceNumber',
        'cnConsignorsReferenceNumber' => 'CnConsignorsReferenceNumber',
        'allowanceDetails' => 'AllowanceDetails',
        'taxDetails' => 'TaxDetails',
        'chargeDetails' => 'ChargeDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channelPurchaseOrderNo' => 'setChannelPurchaseOrderNo',
        'merchantPurchaseOrderNo' => 'setMerchantPurchaseOrderNo',
        'channelProductNo' => 'setChannelProductNo',
        'merchantProductNo' => 'setMerchantProductNo',
        'quantity' => 'setQuantity',
        'netCostCurrencyCode' => 'setNetCostCurrencyCode',
        'netCostAmount' => 'setNetCostAmount',
        'hsnCode' => 'setHsnCode',
        'cnReferenceInvoiceNumber' => 'setCnReferenceInvoiceNumber',
        'cnDebitNoteNumber' => 'setCnDebitNoteNumber',
        'cnReturnsReferenceNumber' => 'setCnReturnsReferenceNumber',
        'cnRmaId' => 'setCnRmaId',
        'cnGoodsReturnDate' => 'setCnGoodsReturnDate',
        'cnCoopReferenceNumber' => 'setCnCoopReferenceNumber',
        'cnConsignorsReferenceNumber' => 'setCnConsignorsReferenceNumber',
        'allowanceDetails' => 'setAllowanceDetails',
        'taxDetails' => 'setTaxDetails',
        'chargeDetails' => 'setChargeDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channelPurchaseOrderNo' => 'getChannelPurchaseOrderNo',
        'merchantPurchaseOrderNo' => 'getMerchantPurchaseOrderNo',
        'channelProductNo' => 'getChannelProductNo',
        'merchantProductNo' => 'getMerchantProductNo',
        'quantity' => 'getQuantity',
        'netCostCurrencyCode' => 'getNetCostCurrencyCode',
        'netCostAmount' => 'getNetCostAmount',
        'hsnCode' => 'getHsnCode',
        'cnReferenceInvoiceNumber' => 'getCnReferenceInvoiceNumber',
        'cnDebitNoteNumber' => 'getCnDebitNoteNumber',
        'cnReturnsReferenceNumber' => 'getCnReturnsReferenceNumber',
        'cnRmaId' => 'getCnRmaId',
        'cnGoodsReturnDate' => 'getCnGoodsReturnDate',
        'cnCoopReferenceNumber' => 'getCnCoopReferenceNumber',
        'cnConsignorsReferenceNumber' => 'getCnConsignorsReferenceNumber',
        'allowanceDetails' => 'getAllowanceDetails',
        'taxDetails' => 'getTaxDetails',
        'chargeDetails' => 'getChargeDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('channelPurchaseOrderNo', $data ?? [], null);
        $this->setIfExists('merchantPurchaseOrderNo', $data ?? [], null);
        $this->setIfExists('channelProductNo', $data ?? [], null);
        $this->setIfExists('merchantProductNo', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('netCostCurrencyCode', $data ?? [], null);
        $this->setIfExists('netCostAmount', $data ?? [], null);
        $this->setIfExists('hsnCode', $data ?? [], null);
        $this->setIfExists('cnReferenceInvoiceNumber', $data ?? [], null);
        $this->setIfExists('cnDebitNoteNumber', $data ?? [], null);
        $this->setIfExists('cnReturnsReferenceNumber', $data ?? [], null);
        $this->setIfExists('cnRmaId', $data ?? [], null);
        $this->setIfExists('cnGoodsReturnDate', $data ?? [], null);
        $this->setIfExists('cnCoopReferenceNumber', $data ?? [], null);
        $this->setIfExists('cnConsignorsReferenceNumber', $data ?? [], null);
        $this->setIfExists('allowanceDetails', $data ?? [], null);
        $this->setIfExists('taxDetails', $data ?? [], null);
        $this->setIfExists('chargeDetails', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channelPurchaseOrderNo
     *
     * @return string|null
     */
    public function getChannelPurchaseOrderNo()
    {
        return $this->container['channelPurchaseOrderNo'];
    }

    /**
     * Sets channelPurchaseOrderNo
     *
     * @param string|null $channelPurchaseOrderNo channelPurchaseOrderNo
     *
     * @return self
     */
    public function setChannelPurchaseOrderNo($channelPurchaseOrderNo)
    {
        if (is_null($channelPurchaseOrderNo)) {
            array_push($this->openAPINullablesSetToNull, 'channelPurchaseOrderNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channelPurchaseOrderNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channelPurchaseOrderNo'] = $channelPurchaseOrderNo;

        return $this;
    }

    /**
     * Gets merchantPurchaseOrderNo
     *
     * @return string|null
     */
    public function getMerchantPurchaseOrderNo()
    {
        return $this->container['merchantPurchaseOrderNo'];
    }

    /**
     * Sets merchantPurchaseOrderNo
     *
     * @param string|null $merchantPurchaseOrderNo merchantPurchaseOrderNo
     *
     * @return self
     */
    public function setMerchantPurchaseOrderNo($merchantPurchaseOrderNo)
    {
        if (is_null($merchantPurchaseOrderNo)) {
            array_push($this->openAPINullablesSetToNull, 'merchantPurchaseOrderNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantPurchaseOrderNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchantPurchaseOrderNo'] = $merchantPurchaseOrderNo;

        return $this;
    }

    /**
     * Gets channelProductNo
     *
     * @return string|null
     */
    public function getChannelProductNo()
    {
        return $this->container['channelProductNo'];
    }

    /**
     * Sets channelProductNo
     *
     * @param string|null $channelProductNo channelProductNo
     *
     * @return self
     */
    public function setChannelProductNo($channelProductNo)
    {
        if (is_null($channelProductNo)) {
            array_push($this->openAPINullablesSetToNull, 'channelProductNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channelProductNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channelProductNo'] = $channelProductNo;

        return $this;
    }

    /**
     * Gets merchantProductNo
     *
     * @return string|null
     */
    public function getMerchantProductNo()
    {
        return $this->container['merchantProductNo'];
    }

    /**
     * Sets merchantProductNo
     *
     * @param string|null $merchantProductNo merchantProductNo
     *
     * @return self
     */
    public function setMerchantProductNo($merchantProductNo)
    {
        if (is_null($merchantProductNo)) {
            array_push($this->openAPINullablesSetToNull, 'merchantProductNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantProductNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchantProductNo'] = $merchantProductNo;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets netCostCurrencyCode
     *
     * @return string|null
     */
    public function getNetCostCurrencyCode()
    {
        return $this->container['netCostCurrencyCode'];
    }

    /**
     * Sets netCostCurrencyCode
     *
     * @param string|null $netCostCurrencyCode netCostCurrencyCode
     *
     * @return self
     */
    public function setNetCostCurrencyCode($netCostCurrencyCode)
    {
        if (is_null($netCostCurrencyCode)) {
            array_push($this->openAPINullablesSetToNull, 'netCostCurrencyCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('netCostCurrencyCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['netCostCurrencyCode'] = $netCostCurrencyCode;

        return $this;
    }

    /**
     * Gets netCostAmount
     *
     * @return float|null
     */
    public function getNetCostAmount()
    {
        return $this->container['netCostAmount'];
    }

    /**
     * Sets netCostAmount
     *
     * @param float|null $netCostAmount netCostAmount
     *
     * @return self
     */
    public function setNetCostAmount($netCostAmount)
    {
        if (is_null($netCostAmount)) {
            throw new \InvalidArgumentException('non-nullable netCostAmount cannot be null');
        }
        $this->container['netCostAmount'] = $netCostAmount;

        return $this;
    }

    /**
     * Gets hsnCode
     *
     * @return string|null
     */
    public function getHsnCode()
    {
        return $this->container['hsnCode'];
    }

    /**
     * Sets hsnCode
     *
     * @param string|null $hsnCode hsnCode
     *
     * @return self
     */
    public function setHsnCode($hsnCode)
    {
        if (is_null($hsnCode)) {
            array_push($this->openAPINullablesSetToNull, 'hsnCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hsnCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hsnCode'] = $hsnCode;

        return $this;
    }

    /**
     * Gets cnReferenceInvoiceNumber
     *
     * @return string|null
     */
    public function getCnReferenceInvoiceNumber()
    {
        return $this->container['cnReferenceInvoiceNumber'];
    }

    /**
     * Sets cnReferenceInvoiceNumber
     *
     * @param string|null $cnReferenceInvoiceNumber cnReferenceInvoiceNumber
     *
     * @return self
     */
    public function setCnReferenceInvoiceNumber($cnReferenceInvoiceNumber)
    {
        if (is_null($cnReferenceInvoiceNumber)) {
            array_push($this->openAPINullablesSetToNull, 'cnReferenceInvoiceNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cnReferenceInvoiceNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cnReferenceInvoiceNumber'] = $cnReferenceInvoiceNumber;

        return $this;
    }

    /**
     * Gets cnDebitNoteNumber
     *
     * @return string|null
     */
    public function getCnDebitNoteNumber()
    {
        return $this->container['cnDebitNoteNumber'];
    }

    /**
     * Sets cnDebitNoteNumber
     *
     * @param string|null $cnDebitNoteNumber cnDebitNoteNumber
     *
     * @return self
     */
    public function setCnDebitNoteNumber($cnDebitNoteNumber)
    {
        if (is_null($cnDebitNoteNumber)) {
            array_push($this->openAPINullablesSetToNull, 'cnDebitNoteNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cnDebitNoteNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cnDebitNoteNumber'] = $cnDebitNoteNumber;

        return $this;
    }

    /**
     * Gets cnReturnsReferenceNumber
     *
     * @return string|null
     */
    public function getCnReturnsReferenceNumber()
    {
        return $this->container['cnReturnsReferenceNumber'];
    }

    /**
     * Sets cnReturnsReferenceNumber
     *
     * @param string|null $cnReturnsReferenceNumber cnReturnsReferenceNumber
     *
     * @return self
     */
    public function setCnReturnsReferenceNumber($cnReturnsReferenceNumber)
    {
        if (is_null($cnReturnsReferenceNumber)) {
            array_push($this->openAPINullablesSetToNull, 'cnReturnsReferenceNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cnReturnsReferenceNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cnReturnsReferenceNumber'] = $cnReturnsReferenceNumber;

        return $this;
    }

    /**
     * Gets cnRmaId
     *
     * @return string|null
     */
    public function getCnRmaId()
    {
        return $this->container['cnRmaId'];
    }

    /**
     * Sets cnRmaId
     *
     * @param string|null $cnRmaId cnRmaId
     *
     * @return self
     */
    public function setCnRmaId($cnRmaId)
    {
        if (is_null($cnRmaId)) {
            array_push($this->openAPINullablesSetToNull, 'cnRmaId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cnRmaId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cnRmaId'] = $cnRmaId;

        return $this;
    }

    /**
     * Gets cnGoodsReturnDate
     *
     * @return \DateTime|null
     */
    public function getCnGoodsReturnDate()
    {
        return $this->container['cnGoodsReturnDate'];
    }

    /**
     * Sets cnGoodsReturnDate
     *
     * @param \DateTime|null $cnGoodsReturnDate cnGoodsReturnDate
     *
     * @return self
     */
    public function setCnGoodsReturnDate($cnGoodsReturnDate)
    {
        if (is_null($cnGoodsReturnDate)) {
            throw new \InvalidArgumentException('non-nullable cnGoodsReturnDate cannot be null');
        }
        $this->container['cnGoodsReturnDate'] = $cnGoodsReturnDate;

        return $this;
    }

    /**
     * Gets cnCoopReferenceNumber
     *
     * @return string|null
     */
    public function getCnCoopReferenceNumber()
    {
        return $this->container['cnCoopReferenceNumber'];
    }

    /**
     * Sets cnCoopReferenceNumber
     *
     * @param string|null $cnCoopReferenceNumber cnCoopReferenceNumber
     *
     * @return self
     */
    public function setCnCoopReferenceNumber($cnCoopReferenceNumber)
    {
        if (is_null($cnCoopReferenceNumber)) {
            array_push($this->openAPINullablesSetToNull, 'cnCoopReferenceNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cnCoopReferenceNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cnCoopReferenceNumber'] = $cnCoopReferenceNumber;

        return $this;
    }

    /**
     * Gets cnConsignorsReferenceNumber
     *
     * @return string|null
     */
    public function getCnConsignorsReferenceNumber()
    {
        return $this->container['cnConsignorsReferenceNumber'];
    }

    /**
     * Sets cnConsignorsReferenceNumber
     *
     * @param string|null $cnConsignorsReferenceNumber cnConsignorsReferenceNumber
     *
     * @return self
     */
    public function setCnConsignorsReferenceNumber($cnConsignorsReferenceNumber)
    {
        if (is_null($cnConsignorsReferenceNumber)) {
            array_push($this->openAPINullablesSetToNull, 'cnConsignorsReferenceNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cnConsignorsReferenceNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cnConsignorsReferenceNumber'] = $cnConsignorsReferenceNumber;

        return $this;
    }

    /**
     * Gets allowanceDetails
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\PurchaseOrderInvoiceAllowanceDetails[]|null
     */
    public function getAllowanceDetails()
    {
        return $this->container['allowanceDetails'];
    }

    /**
     * Sets allowanceDetails
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\PurchaseOrderInvoiceAllowanceDetails[]|null $allowanceDetails allowanceDetails
     *
     * @return self
     */
    public function setAllowanceDetails($allowanceDetails)
    {
        if (is_null($allowanceDetails)) {
            array_push($this->openAPINullablesSetToNull, 'allowanceDetails');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allowanceDetails', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['allowanceDetails'] = $allowanceDetails;

        return $this;
    }

    /**
     * Gets taxDetails
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\PurchaseOrderInvoiceTaxDetails[]|null
     */
    public function getTaxDetails()
    {
        return $this->container['taxDetails'];
    }

    /**
     * Sets taxDetails
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\PurchaseOrderInvoiceTaxDetails[]|null $taxDetails taxDetails
     *
     * @return self
     */
    public function setTaxDetails($taxDetails)
    {
        if (is_null($taxDetails)) {
            array_push($this->openAPINullablesSetToNull, 'taxDetails');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('taxDetails', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['taxDetails'] = $taxDetails;

        return $this;
    }

    /**
     * Gets chargeDetails
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\PurchaseOrderInvoiceChargeDetails[]|null
     */
    public function getChargeDetails()
    {
        return $this->container['chargeDetails'];
    }

    /**
     * Sets chargeDetails
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\PurchaseOrderInvoiceChargeDetails[]|null $chargeDetails chargeDetails
     *
     * @return self
     */
    public function setChargeDetails($chargeDetails)
    {
        if (is_null($chargeDetails)) {
            array_push($this->openAPINullablesSetToNull, 'chargeDetails');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chargeDetails', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['chargeDetails'] = $chargeDetails;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


