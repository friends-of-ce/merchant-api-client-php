<?php
/**
 * MerchantOrderResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FriendsOfCE\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.13.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FriendsOfCE\Merchant\ApiClient\Model;

use \ArrayAccess;
use \FriendsOfCE\Merchant\ApiClient\ObjectSerializer;

/**
 * MerchantOrderResponse Class Doc Comment
 *
 * @category Class
 * @package  FriendsOfCE\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MerchantOrderResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MerchantOrderResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'channelName' => 'string',
        'channelId' => 'int',
        'globalChannelName' => 'string',
        'globalChannelId' => 'int',
        'channelOrderSupport' => '\FriendsOfCE\Merchant\ApiClient\Model\OrderSupport',
        'channelOrderNo' => 'string',
        'merchantOrderNo' => 'string',
        'status' => '\FriendsOfCE\Merchant\ApiClient\Model\OrderStatusView',
        'isBusinessOrder' => 'bool',
        'acknowledgedDate' => '\DateTime',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'merchantComment' => 'string',
        'billingAddress' => '\FriendsOfCE\Merchant\ApiClient\Model\MerchantAddressResponse',
        'shippingAddress' => '\FriendsOfCE\Merchant\ApiClient\Model\MerchantAddressResponse',
        'subTotalInclVat' => 'float',
        'subTotalVat' => 'float',
        'shippingCostsVat' => 'float',
        'totalInclVat' => 'float',
        'totalVat' => 'float',
        'originalSubTotalInclVat' => 'float',
        'originalSubTotalVat' => 'float',
        'originalShippingCostsInclVat' => 'float',
        'originalShippingCostsVat' => 'float',
        'originalTotalInclVat' => 'float',
        'originalTotalVat' => 'float',
        'subTotalExclVat' => 'float',
        'totalExclVat' => 'float',
        'shippingCostsExclVat' => 'float',
        'originalSubTotalExclVat' => 'float',
        'originalShippingCostsExclVat' => 'float',
        'originalTotalExclVat' => 'float',
        'lines' => '\FriendsOfCE\Merchant\ApiClient\Model\MerchantOrderLineResponse[]',
        'shippingCostsInclVat' => 'float',
        'phone' => 'string',
        'email' => 'string',
        'companyRegistrationNo' => 'string',
        'vatNo' => 'string',
        'paymentMethod' => 'string',
        'paymentReferenceNo' => 'string',
        'currencyCode' => 'string',
        'orderDate' => '\DateTime',
        'channelCustomerNo' => 'string',
        'extraData' => 'array<string,string>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'channelName' => null,
        'channelId' => 'int32',
        'globalChannelName' => null,
        'globalChannelId' => 'int32',
        'channelOrderSupport' => null,
        'channelOrderNo' => null,
        'merchantOrderNo' => null,
        'status' => null,
        'isBusinessOrder' => null,
        'acknowledgedDate' => 'date-time',
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'merchantComment' => null,
        'billingAddress' => null,
        'shippingAddress' => null,
        'subTotalInclVat' => 'decimal',
        'subTotalVat' => 'decimal',
        'shippingCostsVat' => 'decimal',
        'totalInclVat' => 'decimal',
        'totalVat' => 'decimal',
        'originalSubTotalInclVat' => 'decimal',
        'originalSubTotalVat' => 'decimal',
        'originalShippingCostsInclVat' => 'decimal',
        'originalShippingCostsVat' => 'decimal',
        'originalTotalInclVat' => 'decimal',
        'originalTotalVat' => 'decimal',
        'subTotalExclVat' => 'decimal',
        'totalExclVat' => 'decimal',
        'shippingCostsExclVat' => 'decimal',
        'originalSubTotalExclVat' => 'decimal',
        'originalShippingCostsExclVat' => 'decimal',
        'originalTotalExclVat' => 'decimal',
        'lines' => null,
        'shippingCostsInclVat' => 'decimal',
        'phone' => null,
        'email' => null,
        'companyRegistrationNo' => null,
        'vatNo' => null,
        'paymentMethod' => null,
        'paymentReferenceNo' => null,
        'currencyCode' => null,
        'orderDate' => 'date-time',
        'channelCustomerNo' => null,
        'extraData' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'channelName' => true,
		'channelId' => true,
		'globalChannelName' => true,
		'globalChannelId' => true,
		'channelOrderSupport' => false,
		'channelOrderNo' => true,
		'merchantOrderNo' => true,
		'status' => false,
		'isBusinessOrder' => false,
		'acknowledgedDate' => true,
		'createdAt' => true,
		'updatedAt' => true,
		'merchantComment' => true,
		'billingAddress' => false,
		'shippingAddress' => false,
		'subTotalInclVat' => true,
		'subTotalVat' => true,
		'shippingCostsVat' => true,
		'totalInclVat' => false,
		'totalVat' => true,
		'originalSubTotalInclVat' => true,
		'originalSubTotalVat' => true,
		'originalShippingCostsInclVat' => true,
		'originalShippingCostsVat' => true,
		'originalTotalInclVat' => true,
		'originalTotalVat' => true,
		'subTotalExclVat' => true,
		'totalExclVat' => true,
		'shippingCostsExclVat' => true,
		'originalSubTotalExclVat' => true,
		'originalShippingCostsExclVat' => true,
		'originalTotalExclVat' => true,
		'lines' => true,
		'shippingCostsInclVat' => false,
		'phone' => true,
		'email' => false,
		'companyRegistrationNo' => true,
		'vatNo' => true,
		'paymentMethod' => true,
		'paymentReferenceNo' => true,
		'currencyCode' => false,
		'orderDate' => false,
		'channelCustomerNo' => true,
		'extraData' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'channelName' => 'ChannelName',
        'channelId' => 'ChannelId',
        'globalChannelName' => 'GlobalChannelName',
        'globalChannelId' => 'GlobalChannelId',
        'channelOrderSupport' => 'ChannelOrderSupport',
        'channelOrderNo' => 'ChannelOrderNo',
        'merchantOrderNo' => 'MerchantOrderNo',
        'status' => 'Status',
        'isBusinessOrder' => 'IsBusinessOrder',
        'acknowledgedDate' => 'AcknowledgedDate',
        'createdAt' => 'CreatedAt',
        'updatedAt' => 'UpdatedAt',
        'merchantComment' => 'MerchantComment',
        'billingAddress' => 'BillingAddress',
        'shippingAddress' => 'ShippingAddress',
        'subTotalInclVat' => 'SubTotalInclVat',
        'subTotalVat' => 'SubTotalVat',
        'shippingCostsVat' => 'ShippingCostsVat',
        'totalInclVat' => 'TotalInclVat',
        'totalVat' => 'TotalVat',
        'originalSubTotalInclVat' => 'OriginalSubTotalInclVat',
        'originalSubTotalVat' => 'OriginalSubTotalVat',
        'originalShippingCostsInclVat' => 'OriginalShippingCostsInclVat',
        'originalShippingCostsVat' => 'OriginalShippingCostsVat',
        'originalTotalInclVat' => 'OriginalTotalInclVat',
        'originalTotalVat' => 'OriginalTotalVat',
        'subTotalExclVat' => 'SubTotalExclVat',
        'totalExclVat' => 'TotalExclVat',
        'shippingCostsExclVat' => 'ShippingCostsExclVat',
        'originalSubTotalExclVat' => 'OriginalSubTotalExclVat',
        'originalShippingCostsExclVat' => 'OriginalShippingCostsExclVat',
        'originalTotalExclVat' => 'OriginalTotalExclVat',
        'lines' => 'Lines',
        'shippingCostsInclVat' => 'ShippingCostsInclVat',
        'phone' => 'Phone',
        'email' => 'Email',
        'companyRegistrationNo' => 'CompanyRegistrationNo',
        'vatNo' => 'VatNo',
        'paymentMethod' => 'PaymentMethod',
        'paymentReferenceNo' => 'PaymentReferenceNo',
        'currencyCode' => 'CurrencyCode',
        'orderDate' => 'OrderDate',
        'channelCustomerNo' => 'ChannelCustomerNo',
        'extraData' => 'ExtraData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'channelName' => 'setChannelName',
        'channelId' => 'setChannelId',
        'globalChannelName' => 'setGlobalChannelName',
        'globalChannelId' => 'setGlobalChannelId',
        'channelOrderSupport' => 'setChannelOrderSupport',
        'channelOrderNo' => 'setChannelOrderNo',
        'merchantOrderNo' => 'setMerchantOrderNo',
        'status' => 'setStatus',
        'isBusinessOrder' => 'setIsBusinessOrder',
        'acknowledgedDate' => 'setAcknowledgedDate',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'merchantComment' => 'setMerchantComment',
        'billingAddress' => 'setBillingAddress',
        'shippingAddress' => 'setShippingAddress',
        'subTotalInclVat' => 'setSubTotalInclVat',
        'subTotalVat' => 'setSubTotalVat',
        'shippingCostsVat' => 'setShippingCostsVat',
        'totalInclVat' => 'setTotalInclVat',
        'totalVat' => 'setTotalVat',
        'originalSubTotalInclVat' => 'setOriginalSubTotalInclVat',
        'originalSubTotalVat' => 'setOriginalSubTotalVat',
        'originalShippingCostsInclVat' => 'setOriginalShippingCostsInclVat',
        'originalShippingCostsVat' => 'setOriginalShippingCostsVat',
        'originalTotalInclVat' => 'setOriginalTotalInclVat',
        'originalTotalVat' => 'setOriginalTotalVat',
        'subTotalExclVat' => 'setSubTotalExclVat',
        'totalExclVat' => 'setTotalExclVat',
        'shippingCostsExclVat' => 'setShippingCostsExclVat',
        'originalSubTotalExclVat' => 'setOriginalSubTotalExclVat',
        'originalShippingCostsExclVat' => 'setOriginalShippingCostsExclVat',
        'originalTotalExclVat' => 'setOriginalTotalExclVat',
        'lines' => 'setLines',
        'shippingCostsInclVat' => 'setShippingCostsInclVat',
        'phone' => 'setPhone',
        'email' => 'setEmail',
        'companyRegistrationNo' => 'setCompanyRegistrationNo',
        'vatNo' => 'setVatNo',
        'paymentMethod' => 'setPaymentMethod',
        'paymentReferenceNo' => 'setPaymentReferenceNo',
        'currencyCode' => 'setCurrencyCode',
        'orderDate' => 'setOrderDate',
        'channelCustomerNo' => 'setChannelCustomerNo',
        'extraData' => 'setExtraData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'channelName' => 'getChannelName',
        'channelId' => 'getChannelId',
        'globalChannelName' => 'getGlobalChannelName',
        'globalChannelId' => 'getGlobalChannelId',
        'channelOrderSupport' => 'getChannelOrderSupport',
        'channelOrderNo' => 'getChannelOrderNo',
        'merchantOrderNo' => 'getMerchantOrderNo',
        'status' => 'getStatus',
        'isBusinessOrder' => 'getIsBusinessOrder',
        'acknowledgedDate' => 'getAcknowledgedDate',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'merchantComment' => 'getMerchantComment',
        'billingAddress' => 'getBillingAddress',
        'shippingAddress' => 'getShippingAddress',
        'subTotalInclVat' => 'getSubTotalInclVat',
        'subTotalVat' => 'getSubTotalVat',
        'shippingCostsVat' => 'getShippingCostsVat',
        'totalInclVat' => 'getTotalInclVat',
        'totalVat' => 'getTotalVat',
        'originalSubTotalInclVat' => 'getOriginalSubTotalInclVat',
        'originalSubTotalVat' => 'getOriginalSubTotalVat',
        'originalShippingCostsInclVat' => 'getOriginalShippingCostsInclVat',
        'originalShippingCostsVat' => 'getOriginalShippingCostsVat',
        'originalTotalInclVat' => 'getOriginalTotalInclVat',
        'originalTotalVat' => 'getOriginalTotalVat',
        'subTotalExclVat' => 'getSubTotalExclVat',
        'totalExclVat' => 'getTotalExclVat',
        'shippingCostsExclVat' => 'getShippingCostsExclVat',
        'originalSubTotalExclVat' => 'getOriginalSubTotalExclVat',
        'originalShippingCostsExclVat' => 'getOriginalShippingCostsExclVat',
        'originalTotalExclVat' => 'getOriginalTotalExclVat',
        'lines' => 'getLines',
        'shippingCostsInclVat' => 'getShippingCostsInclVat',
        'phone' => 'getPhone',
        'email' => 'getEmail',
        'companyRegistrationNo' => 'getCompanyRegistrationNo',
        'vatNo' => 'getVatNo',
        'paymentMethod' => 'getPaymentMethod',
        'paymentReferenceNo' => 'getPaymentReferenceNo',
        'currencyCode' => 'getCurrencyCode',
        'orderDate' => 'getOrderDate',
        'channelCustomerNo' => 'getChannelCustomerNo',
        'extraData' => 'getExtraData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('channelName', $data ?? [], null);
        $this->setIfExists('channelId', $data ?? [], null);
        $this->setIfExists('globalChannelName', $data ?? [], null);
        $this->setIfExists('globalChannelId', $data ?? [], null);
        $this->setIfExists('channelOrderSupport', $data ?? [], null);
        $this->setIfExists('channelOrderNo', $data ?? [], null);
        $this->setIfExists('merchantOrderNo', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('isBusinessOrder', $data ?? [], null);
        $this->setIfExists('acknowledgedDate', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('merchantComment', $data ?? [], null);
        $this->setIfExists('billingAddress', $data ?? [], null);
        $this->setIfExists('shippingAddress', $data ?? [], null);
        $this->setIfExists('subTotalInclVat', $data ?? [], null);
        $this->setIfExists('subTotalVat', $data ?? [], null);
        $this->setIfExists('shippingCostsVat', $data ?? [], null);
        $this->setIfExists('totalInclVat', $data ?? [], null);
        $this->setIfExists('totalVat', $data ?? [], null);
        $this->setIfExists('originalSubTotalInclVat', $data ?? [], null);
        $this->setIfExists('originalSubTotalVat', $data ?? [], null);
        $this->setIfExists('originalShippingCostsInclVat', $data ?? [], null);
        $this->setIfExists('originalShippingCostsVat', $data ?? [], null);
        $this->setIfExists('originalTotalInclVat', $data ?? [], null);
        $this->setIfExists('originalTotalVat', $data ?? [], null);
        $this->setIfExists('subTotalExclVat', $data ?? [], null);
        $this->setIfExists('totalExclVat', $data ?? [], null);
        $this->setIfExists('shippingCostsExclVat', $data ?? [], null);
        $this->setIfExists('originalSubTotalExclVat', $data ?? [], null);
        $this->setIfExists('originalShippingCostsExclVat', $data ?? [], null);
        $this->setIfExists('originalTotalExclVat', $data ?? [], null);
        $this->setIfExists('lines', $data ?? [], null);
        $this->setIfExists('shippingCostsInclVat', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('companyRegistrationNo', $data ?? [], null);
        $this->setIfExists('vatNo', $data ?? [], null);
        $this->setIfExists('paymentMethod', $data ?? [], null);
        $this->setIfExists('paymentReferenceNo', $data ?? [], null);
        $this->setIfExists('currencyCode', $data ?? [], null);
        $this->setIfExists('orderDate', $data ?? [], null);
        $this->setIfExists('channelCustomerNo', $data ?? [], null);
        $this->setIfExists('extraData', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) > 50)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) < 0)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ((mb_strlen($this->container['email']) > 250)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 250.";
        }

        if ((mb_strlen($this->container['email']) < 0)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['companyRegistrationNo']) && (mb_strlen($this->container['companyRegistrationNo']) > 50)) {
            $invalidProperties[] = "invalid value for 'companyRegistrationNo', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['companyRegistrationNo']) && (mb_strlen($this->container['companyRegistrationNo']) < 0)) {
            $invalidProperties[] = "invalid value for 'companyRegistrationNo', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['vatNo']) && (mb_strlen($this->container['vatNo']) > 50)) {
            $invalidProperties[] = "invalid value for 'vatNo', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['vatNo']) && (mb_strlen($this->container['vatNo']) < 0)) {
            $invalidProperties[] = "invalid value for 'vatNo', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['paymentMethod']) && (mb_strlen($this->container['paymentMethod']) > 50)) {
            $invalidProperties[] = "invalid value for 'paymentMethod', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['paymentMethod']) && (mb_strlen($this->container['paymentMethod']) < 0)) {
            $invalidProperties[] = "invalid value for 'paymentMethod', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['paymentReferenceNo']) && (mb_strlen($this->container['paymentReferenceNo']) > 250)) {
            $invalidProperties[] = "invalid value for 'paymentReferenceNo', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['paymentReferenceNo']) && (mb_strlen($this->container['paymentReferenceNo']) < 0)) {
            $invalidProperties[] = "invalid value for 'paymentReferenceNo', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['currencyCode'] === null) {
            $invalidProperties[] = "'currencyCode' can't be null";
        }
        if ((mb_strlen($this->container['currencyCode']) > 3)) {
            $invalidProperties[] = "invalid value for 'currencyCode', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['currencyCode']) < 1)) {
            $invalidProperties[] = "invalid value for 'currencyCode', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['orderDate'] === null) {
            $invalidProperties[] = "'orderDate' can't be null";
        }
        if (!is_null($this->container['channelCustomerNo']) && (mb_strlen($this->container['channelCustomerNo']) > 50)) {
            $invalidProperties[] = "invalid value for 'channelCustomerNo', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['channelCustomerNo']) && (mb_strlen($this->container['channelCustomerNo']) < 0)) {
            $invalidProperties[] = "invalid value for 'channelCustomerNo', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The unique identifier used by ChannelEngine. This identifier does  not have to be saved. It should only be used in a call to acknowledge the order.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets channelName
     *
     * @return string|null
     */
    public function getChannelName()
    {
        return $this->container['channelName'];
    }

    /**
     * Sets channelName
     *
     * @param string|null $channelName The name of the channel for this specific environment/account.
     *
     * @return self
     */
    public function setChannelName($channelName)
    {
        if (is_null($channelName)) {
            array_push($this->openAPINullablesSetToNull, 'channelName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channelName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channelName'] = $channelName;

        return $this;
    }

    /**
     * Gets channelId
     *
     * @return int|null
     */
    public function getChannelId()
    {
        return $this->container['channelId'];
    }

    /**
     * Sets channelId
     *
     * @param int|null $channelId The unique ID of the channel for this specific environment/account.
     *
     * @return self
     */
    public function setChannelId($channelId)
    {
        if (is_null($channelId)) {
            array_push($this->openAPINullablesSetToNull, 'channelId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channelId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channelId'] = $channelId;

        return $this;
    }

    /**
     * Gets globalChannelName
     *
     * @return string|null
     */
    public function getGlobalChannelName()
    {
        return $this->container['globalChannelName'];
    }

    /**
     * Sets globalChannelName
     *
     * @param string|null $globalChannelName The name of the channel across all of ChannelEngine.
     *
     * @return self
     */
    public function setGlobalChannelName($globalChannelName)
    {
        if (is_null($globalChannelName)) {
            array_push($this->openAPINullablesSetToNull, 'globalChannelName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('globalChannelName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['globalChannelName'] = $globalChannelName;

        return $this;
    }

    /**
     * Gets globalChannelId
     *
     * @return int|null
     */
    public function getGlobalChannelId()
    {
        return $this->container['globalChannelId'];
    }

    /**
     * Sets globalChannelId
     *
     * @param int|null $globalChannelId The unique ID of the channel across all of ChannelEngine.
     *
     * @return self
     */
    public function setGlobalChannelId($globalChannelId)
    {
        if (is_null($globalChannelId)) {
            array_push($this->openAPINullablesSetToNull, 'globalChannelId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('globalChannelId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['globalChannelId'] = $globalChannelId;

        return $this;
    }

    /**
     * Gets channelOrderSupport
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\OrderSupport|null
     */
    public function getChannelOrderSupport()
    {
        return $this->container['channelOrderSupport'];
    }

    /**
     * Sets channelOrderSupport
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\OrderSupport|null $channelOrderSupport channelOrderSupport
     *
     * @return self
     */
    public function setChannelOrderSupport($channelOrderSupport)
    {
        if (is_null($channelOrderSupport)) {
            throw new \InvalidArgumentException('non-nullable channelOrderSupport cannot be null');
        }
        $this->container['channelOrderSupport'] = $channelOrderSupport;

        return $this;
    }

    /**
     * Gets channelOrderNo
     *
     * @return string|null
     */
    public function getChannelOrderNo()
    {
        return $this->container['channelOrderNo'];
    }

    /**
     * Sets channelOrderNo
     *
     * @param string|null $channelOrderNo The order reference used by the channel.  This number is not guaranteed to be unique accross all orders,  because different channels can use the same order number format.
     *
     * @return self
     */
    public function setChannelOrderNo($channelOrderNo)
    {
        if (is_null($channelOrderNo)) {
            array_push($this->openAPINullablesSetToNull, 'channelOrderNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channelOrderNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channelOrderNo'] = $channelOrderNo;

        return $this;
    }

    /**
     * Gets merchantOrderNo
     *
     * @return string|null
     */
    public function getMerchantOrderNo()
    {
        return $this->container['merchantOrderNo'];
    }

    /**
     * Sets merchantOrderNo
     *
     * @param string|null $merchantOrderNo The unique order reference used by the Merchant
     *
     * @return self
     */
    public function setMerchantOrderNo($merchantOrderNo)
    {
        if (is_null($merchantOrderNo)) {
            array_push($this->openAPINullablesSetToNull, 'merchantOrderNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantOrderNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchantOrderNo'] = $merchantOrderNo;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\OrderStatusView|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\OrderStatusView|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets isBusinessOrder
     *
     * @return bool|null
     */
    public function getIsBusinessOrder()
    {
        return $this->container['isBusinessOrder'];
    }

    /**
     * Sets isBusinessOrder
     *
     * @param bool|null $isBusinessOrder Indicating whether the order is a business order.
     *
     * @return self
     */
    public function setIsBusinessOrder($isBusinessOrder)
    {
        if (is_null($isBusinessOrder)) {
            throw new \InvalidArgumentException('non-nullable isBusinessOrder cannot be null');
        }
        $this->container['isBusinessOrder'] = $isBusinessOrder;

        return $this;
    }

    /**
     * Gets acknowledgedDate
     *
     * @return \DateTime|null
     */
    public function getAcknowledgedDate()
    {
        return $this->container['acknowledgedDate'];
    }

    /**
     * Sets acknowledgedDate
     *
     * @param \DateTime|null $acknowledgedDate The date the order was acknowledged in ChannelEngine.
     *
     * @return self
     */
    public function setAcknowledgedDate($acknowledgedDate)
    {
        if (is_null($acknowledgedDate)) {
            array_push($this->openAPINullablesSetToNull, 'acknowledgedDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('acknowledgedDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['acknowledgedDate'] = $acknowledgedDate;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt The date the order was created in ChannelEngine.
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            array_push($this->openAPINullablesSetToNull, 'createdAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('createdAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt The date the order was last updated in ChannelEngine.
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            array_push($this->openAPINullablesSetToNull, 'updatedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updatedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets merchantComment
     *
     * @return string|null
     */
    public function getMerchantComment()
    {
        return $this->container['merchantComment'];
    }

    /**
     * Sets merchantComment
     *
     * @param string|null $merchantComment The optional comment a merchant can add to an order.
     *
     * @return self
     */
    public function setMerchantComment($merchantComment)
    {
        if (is_null($merchantComment)) {
            array_push($this->openAPINullablesSetToNull, 'merchantComment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantComment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchantComment'] = $merchantComment;

        return $this;
    }

    /**
     * Gets billingAddress
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\MerchantAddressResponse|null
     */
    public function getBillingAddress()
    {
        return $this->container['billingAddress'];
    }

    /**
     * Sets billingAddress
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\MerchantAddressResponse|null $billingAddress billingAddress
     *
     * @return self
     */
    public function setBillingAddress($billingAddress)
    {
        if (is_null($billingAddress)) {
            throw new \InvalidArgumentException('non-nullable billingAddress cannot be null');
        }
        $this->container['billingAddress'] = $billingAddress;

        return $this;
    }

    /**
     * Gets shippingAddress
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\MerchantAddressResponse|null
     */
    public function getShippingAddress()
    {
        return $this->container['shippingAddress'];
    }

    /**
     * Sets shippingAddress
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\MerchantAddressResponse|null $shippingAddress shippingAddress
     *
     * @return self
     */
    public function setShippingAddress($shippingAddress)
    {
        if (is_null($shippingAddress)) {
            throw new \InvalidArgumentException('non-nullable shippingAddress cannot be null');
        }
        $this->container['shippingAddress'] = $shippingAddress;

        return $this;
    }

    /**
     * Gets subTotalInclVat
     *
     * @return float|null
     */
    public function getSubTotalInclVat()
    {
        return $this->container['subTotalInclVat'];
    }

    /**
     * Sets subTotalInclVat
     *
     * @param float|null $subTotalInclVat The total value of the order lines including VAT  (in the shop's base currency calculated using the exchange rate at the time of ordering).
     *
     * @return self
     */
    public function setSubTotalInclVat($subTotalInclVat)
    {
        if (is_null($subTotalInclVat)) {
            array_push($this->openAPINullablesSetToNull, 'subTotalInclVat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subTotalInclVat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subTotalInclVat'] = $subTotalInclVat;

        return $this;
    }

    /**
     * Gets subTotalVat
     *
     * @return float|null
     */
    public function getSubTotalVat()
    {
        return $this->container['subTotalVat'];
    }

    /**
     * Sets subTotalVat
     *
     * @param float|null $subTotalVat The total amount of VAT charged over the order lines  (in the shop's base currency calculated using the exchange rate at the time of ordering).
     *
     * @return self
     */
    public function setSubTotalVat($subTotalVat)
    {
        if (is_null($subTotalVat)) {
            array_push($this->openAPINullablesSetToNull, 'subTotalVat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subTotalVat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subTotalVat'] = $subTotalVat;

        return $this;
    }

    /**
     * Gets shippingCostsVat
     *
     * @return float|null
     */
    public function getShippingCostsVat()
    {
        return $this->container['shippingCostsVat'];
    }

    /**
     * Sets shippingCostsVat
     *
     * @param float|null $shippingCostsVat The total amount of VAT charged over the shipping fee  (in the shop's base currency calculated using the exchange rate at the time of ordering).
     *
     * @return self
     */
    public function setShippingCostsVat($shippingCostsVat)
    {
        if (is_null($shippingCostsVat)) {
            array_push($this->openAPINullablesSetToNull, 'shippingCostsVat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shippingCostsVat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shippingCostsVat'] = $shippingCostsVat;

        return $this;
    }

    /**
     * Gets totalInclVat
     *
     * @return float|null
     */
    public function getTotalInclVat()
    {
        return $this->container['totalInclVat'];
    }

    /**
     * Sets totalInclVat
     *
     * @param float|null $totalInclVat The total value of the order including VAT  (in the shop's base currency calculated using the exchange rate at the time of ordering).
     *
     * @return self
     */
    public function setTotalInclVat($totalInclVat)
    {
        if (is_null($totalInclVat)) {
            throw new \InvalidArgumentException('non-nullable totalInclVat cannot be null');
        }
        $this->container['totalInclVat'] = $totalInclVat;

        return $this;
    }

    /**
     * Gets totalVat
     *
     * @return float|null
     */
    public function getTotalVat()
    {
        return $this->container['totalVat'];
    }

    /**
     * Sets totalVat
     *
     * @param float|null $totalVat The total amount of VAT charged over the total value of te order  (in the shop's base currency calculated using the exchange rate at the time of ordering).
     *
     * @return self
     */
    public function setTotalVat($totalVat)
    {
        if (is_null($totalVat)) {
            array_push($this->openAPINullablesSetToNull, 'totalVat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('totalVat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['totalVat'] = $totalVat;

        return $this;
    }

    /**
     * Gets originalSubTotalInclVat
     *
     * @return float|null
     */
    public function getOriginalSubTotalInclVat()
    {
        return $this->container['originalSubTotalInclVat'];
    }

    /**
     * Sets originalSubTotalInclVat
     *
     * @param float|null $originalSubTotalInclVat The total value of the order lines including VAT  (in the currency in which the order was paid for, see CurrencyCode).
     *
     * @return self
     */
    public function setOriginalSubTotalInclVat($originalSubTotalInclVat)
    {
        if (is_null($originalSubTotalInclVat)) {
            array_push($this->openAPINullablesSetToNull, 'originalSubTotalInclVat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('originalSubTotalInclVat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['originalSubTotalInclVat'] = $originalSubTotalInclVat;

        return $this;
    }

    /**
     * Gets originalSubTotalVat
     *
     * @return float|null
     */
    public function getOriginalSubTotalVat()
    {
        return $this->container['originalSubTotalVat'];
    }

    /**
     * Sets originalSubTotalVat
     *
     * @param float|null $originalSubTotalVat The total amount of VAT charged over the order lines  (in the currency in which the order was paid for, see CurrencyCode).
     *
     * @return self
     */
    public function setOriginalSubTotalVat($originalSubTotalVat)
    {
        if (is_null($originalSubTotalVat)) {
            array_push($this->openAPINullablesSetToNull, 'originalSubTotalVat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('originalSubTotalVat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['originalSubTotalVat'] = $originalSubTotalVat;

        return $this;
    }

    /**
     * Gets originalShippingCostsInclVat
     *
     * @return float|null
     */
    public function getOriginalShippingCostsInclVat()
    {
        return $this->container['originalShippingCostsInclVat'];
    }

    /**
     * Sets originalShippingCostsInclVat
     *
     * @param float|null $originalShippingCostsInclVat The shipping fee including VAT  (in the currency in which the order was paid for, see CurrencyCode).
     *
     * @return self
     */
    public function setOriginalShippingCostsInclVat($originalShippingCostsInclVat)
    {
        if (is_null($originalShippingCostsInclVat)) {
            array_push($this->openAPINullablesSetToNull, 'originalShippingCostsInclVat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('originalShippingCostsInclVat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['originalShippingCostsInclVat'] = $originalShippingCostsInclVat;

        return $this;
    }

    /**
     * Gets originalShippingCostsVat
     *
     * @return float|null
     */
    public function getOriginalShippingCostsVat()
    {
        return $this->container['originalShippingCostsVat'];
    }

    /**
     * Sets originalShippingCostsVat
     *
     * @param float|null $originalShippingCostsVat The total amount of VAT charged over the shipping fee  (in the currency in which the order was paid for, see CurrencyCode).
     *
     * @return self
     */
    public function setOriginalShippingCostsVat($originalShippingCostsVat)
    {
        if (is_null($originalShippingCostsVat)) {
            array_push($this->openAPINullablesSetToNull, 'originalShippingCostsVat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('originalShippingCostsVat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['originalShippingCostsVat'] = $originalShippingCostsVat;

        return $this;
    }

    /**
     * Gets originalTotalInclVat
     *
     * @return float|null
     */
    public function getOriginalTotalInclVat()
    {
        return $this->container['originalTotalInclVat'];
    }

    /**
     * Sets originalTotalInclVat
     *
     * @param float|null $originalTotalInclVat The total value of the order including VAT  (in the currency in which the order was paid for, see CurrencyCode).
     *
     * @return self
     */
    public function setOriginalTotalInclVat($originalTotalInclVat)
    {
        if (is_null($originalTotalInclVat)) {
            array_push($this->openAPINullablesSetToNull, 'originalTotalInclVat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('originalTotalInclVat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['originalTotalInclVat'] = $originalTotalInclVat;

        return $this;
    }

    /**
     * Gets originalTotalVat
     *
     * @return float|null
     */
    public function getOriginalTotalVat()
    {
        return $this->container['originalTotalVat'];
    }

    /**
     * Sets originalTotalVat
     *
     * @param float|null $originalTotalVat The total amount of VAT charged over the total value of te order  (in the currency in which the order was paid for, see CurrencyCode).
     *
     * @return self
     */
    public function setOriginalTotalVat($originalTotalVat)
    {
        if (is_null($originalTotalVat)) {
            array_push($this->openAPINullablesSetToNull, 'originalTotalVat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('originalTotalVat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['originalTotalVat'] = $originalTotalVat;

        return $this;
    }

    /**
     * Gets subTotalExclVat
     *
     * @return float|null
     */
    public function getSubTotalExclVat()
    {
        return $this->container['subTotalExclVat'];
    }

    /**
     * Sets subTotalExclVat
     *
     * @param float|null $subTotalExclVat subTotalExclVat
     *
     * @return self
     */
    public function setSubTotalExclVat($subTotalExclVat)
    {
        if (is_null($subTotalExclVat)) {
            array_push($this->openAPINullablesSetToNull, 'subTotalExclVat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subTotalExclVat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subTotalExclVat'] = $subTotalExclVat;

        return $this;
    }

    /**
     * Gets totalExclVat
     *
     * @return float|null
     */
    public function getTotalExclVat()
    {
        return $this->container['totalExclVat'];
    }

    /**
     * Sets totalExclVat
     *
     * @param float|null $totalExclVat totalExclVat
     *
     * @return self
     */
    public function setTotalExclVat($totalExclVat)
    {
        if (is_null($totalExclVat)) {
            array_push($this->openAPINullablesSetToNull, 'totalExclVat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('totalExclVat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['totalExclVat'] = $totalExclVat;

        return $this;
    }

    /**
     * Gets shippingCostsExclVat
     *
     * @return float|null
     */
    public function getShippingCostsExclVat()
    {
        return $this->container['shippingCostsExclVat'];
    }

    /**
     * Sets shippingCostsExclVat
     *
     * @param float|null $shippingCostsExclVat shippingCostsExclVat
     *
     * @return self
     */
    public function setShippingCostsExclVat($shippingCostsExclVat)
    {
        if (is_null($shippingCostsExclVat)) {
            array_push($this->openAPINullablesSetToNull, 'shippingCostsExclVat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shippingCostsExclVat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shippingCostsExclVat'] = $shippingCostsExclVat;

        return $this;
    }

    /**
     * Gets originalSubTotalExclVat
     *
     * @return float|null
     */
    public function getOriginalSubTotalExclVat()
    {
        return $this->container['originalSubTotalExclVat'];
    }

    /**
     * Sets originalSubTotalExclVat
     *
     * @param float|null $originalSubTotalExclVat originalSubTotalExclVat
     *
     * @return self
     */
    public function setOriginalSubTotalExclVat($originalSubTotalExclVat)
    {
        if (is_null($originalSubTotalExclVat)) {
            array_push($this->openAPINullablesSetToNull, 'originalSubTotalExclVat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('originalSubTotalExclVat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['originalSubTotalExclVat'] = $originalSubTotalExclVat;

        return $this;
    }

    /**
     * Gets originalShippingCostsExclVat
     *
     * @return float|null
     */
    public function getOriginalShippingCostsExclVat()
    {
        return $this->container['originalShippingCostsExclVat'];
    }

    /**
     * Sets originalShippingCostsExclVat
     *
     * @param float|null $originalShippingCostsExclVat originalShippingCostsExclVat
     *
     * @return self
     */
    public function setOriginalShippingCostsExclVat($originalShippingCostsExclVat)
    {
        if (is_null($originalShippingCostsExclVat)) {
            array_push($this->openAPINullablesSetToNull, 'originalShippingCostsExclVat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('originalShippingCostsExclVat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['originalShippingCostsExclVat'] = $originalShippingCostsExclVat;

        return $this;
    }

    /**
     * Gets originalTotalExclVat
     *
     * @return float|null
     */
    public function getOriginalTotalExclVat()
    {
        return $this->container['originalTotalExclVat'];
    }

    /**
     * Sets originalTotalExclVat
     *
     * @param float|null $originalTotalExclVat originalTotalExclVat
     *
     * @return self
     */
    public function setOriginalTotalExclVat($originalTotalExclVat)
    {
        if (is_null($originalTotalExclVat)) {
            array_push($this->openAPINullablesSetToNull, 'originalTotalExclVat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('originalTotalExclVat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['originalTotalExclVat'] = $originalTotalExclVat;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\MerchantOrderLineResponse[]|null
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\MerchantOrderLineResponse[]|null $lines lines
     *
     * @return self
     */
    public function setLines($lines)
    {
        if (is_null($lines)) {
            array_push($this->openAPINullablesSetToNull, 'lines');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lines', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets shippingCostsInclVat
     *
     * @return float|null
     */
    public function getShippingCostsInclVat()
    {
        return $this->container['shippingCostsInclVat'];
    }

    /**
     * Sets shippingCostsInclVat
     *
     * @param float|null $shippingCostsInclVat shippingCostsInclVat
     *
     * @return self
     */
    public function setShippingCostsInclVat($shippingCostsInclVat)
    {
        if (is_null($shippingCostsInclVat)) {
            throw new \InvalidArgumentException('non-nullable shippingCostsInclVat cannot be null');
        }
        $this->container['shippingCostsInclVat'] = $shippingCostsInclVat;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone The customer's telephone number.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            array_push($this->openAPINullablesSetToNull, 'phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($phone) && (mb_strlen($phone) > 50)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling MerchantOrderResponse., must be smaller than or equal to 50.');
        }
        if (!is_null($phone) && (mb_strlen($phone) < 0)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling MerchantOrderResponse., must be bigger than or equal to 0.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The customer's email.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 250)) {
            throw new \InvalidArgumentException('invalid length for $email when calling MerchantOrderResponse., must be smaller than or equal to 250.');
        }
        if ((mb_strlen($email) < 0)) {
            throw new \InvalidArgumentException('invalid length for $email when calling MerchantOrderResponse., must be bigger than or equal to 0.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets companyRegistrationNo
     *
     * @return string|null
     */
    public function getCompanyRegistrationNo()
    {
        return $this->container['companyRegistrationNo'];
    }

    /**
     * Sets companyRegistrationNo
     *
     * @param string|null $companyRegistrationNo Optional. A company's chamber of commerce number.
     *
     * @return self
     */
    public function setCompanyRegistrationNo($companyRegistrationNo)
    {
        if (is_null($companyRegistrationNo)) {
            array_push($this->openAPINullablesSetToNull, 'companyRegistrationNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('companyRegistrationNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($companyRegistrationNo) && (mb_strlen($companyRegistrationNo) > 50)) {
            throw new \InvalidArgumentException('invalid length for $companyRegistrationNo when calling MerchantOrderResponse., must be smaller than or equal to 50.');
        }
        if (!is_null($companyRegistrationNo) && (mb_strlen($companyRegistrationNo) < 0)) {
            throw new \InvalidArgumentException('invalid length for $companyRegistrationNo when calling MerchantOrderResponse., must be bigger than or equal to 0.');
        }

        $this->container['companyRegistrationNo'] = $companyRegistrationNo;

        return $this;
    }

    /**
     * Gets vatNo
     *
     * @return string|null
     */
    public function getVatNo()
    {
        return $this->container['vatNo'];
    }

    /**
     * Sets vatNo
     *
     * @param string|null $vatNo Optional. A company's VAT number.
     *
     * @return self
     */
    public function setVatNo($vatNo)
    {
        if (is_null($vatNo)) {
            array_push($this->openAPINullablesSetToNull, 'vatNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vatNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($vatNo) && (mb_strlen($vatNo) > 50)) {
            throw new \InvalidArgumentException('invalid length for $vatNo when calling MerchantOrderResponse., must be smaller than or equal to 50.');
        }
        if (!is_null($vatNo) && (mb_strlen($vatNo) < 0)) {
            throw new \InvalidArgumentException('invalid length for $vatNo when calling MerchantOrderResponse., must be bigger than or equal to 0.');
        }

        $this->container['vatNo'] = $vatNo;

        return $this;
    }

    /**
     * Gets paymentMethod
     *
     * @return string|null
     */
    public function getPaymentMethod()
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod
     *
     * @param string|null $paymentMethod The payment method used on the order.
     *
     * @return self
     */
    public function setPaymentMethod($paymentMethod)
    {
        if (is_null($paymentMethod)) {
            array_push($this->openAPINullablesSetToNull, 'paymentMethod');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentMethod', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($paymentMethod) && (mb_strlen($paymentMethod) > 50)) {
            throw new \InvalidArgumentException('invalid length for $paymentMethod when calling MerchantOrderResponse., must be smaller than or equal to 50.');
        }
        if (!is_null($paymentMethod) && (mb_strlen($paymentMethod) < 0)) {
            throw new \InvalidArgumentException('invalid length for $paymentMethod when calling MerchantOrderResponse., must be bigger than or equal to 0.');
        }

        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets paymentReferenceNo
     *
     * @return string|null
     */
    public function getPaymentReferenceNo()
    {
        return $this->container['paymentReferenceNo'];
    }

    /**
     * Sets paymentReferenceNo
     *
     * @param string|null $paymentReferenceNo Reference or transaction id for the payment
     *
     * @return self
     */
    public function setPaymentReferenceNo($paymentReferenceNo)
    {
        if (is_null($paymentReferenceNo)) {
            array_push($this->openAPINullablesSetToNull, 'paymentReferenceNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paymentReferenceNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($paymentReferenceNo) && (mb_strlen($paymentReferenceNo) > 250)) {
            throw new \InvalidArgumentException('invalid length for $paymentReferenceNo when calling MerchantOrderResponse., must be smaller than or equal to 250.');
        }
        if (!is_null($paymentReferenceNo) && (mb_strlen($paymentReferenceNo) < 0)) {
            throw new \InvalidArgumentException('invalid length for $paymentReferenceNo when calling MerchantOrderResponse., must be bigger than or equal to 0.');
        }

        $this->container['paymentReferenceNo'] = $paymentReferenceNo;

        return $this;
    }

    /**
     * Gets currencyCode
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currencyCode'];
    }

    /**
     * Sets currencyCode
     *
     * @param string $currencyCode The currency code for the amounts of the order.
     *
     * @return self
     */
    public function setCurrencyCode($currencyCode)
    {
        if (is_null($currencyCode)) {
            throw new \InvalidArgumentException('non-nullable currencyCode cannot be null');
        }
        if ((mb_strlen($currencyCode) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currencyCode when calling MerchantOrderResponse., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($currencyCode) < 1)) {
            throw new \InvalidArgumentException('invalid length for $currencyCode when calling MerchantOrderResponse., must be bigger than or equal to 1.');
        }

        $this->container['currencyCode'] = $currencyCode;

        return $this;
    }

    /**
     * Gets orderDate
     *
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->container['orderDate'];
    }

    /**
     * Sets orderDate
     *
     * @param \DateTime $orderDate The date the order was created at the channel.
     *
     * @return self
     */
    public function setOrderDate($orderDate)
    {
        if (is_null($orderDate)) {
            throw new \InvalidArgumentException('non-nullable orderDate cannot be null');
        }
        $this->container['orderDate'] = $orderDate;

        return $this;
    }

    /**
     * Gets channelCustomerNo
     *
     * @return string|null
     */
    public function getChannelCustomerNo()
    {
        return $this->container['channelCustomerNo'];
    }

    /**
     * Sets channelCustomerNo
     *
     * @param string|null $channelCustomerNo The unique customer reference used by the channel.
     *
     * @return self
     */
    public function setChannelCustomerNo($channelCustomerNo)
    {
        if (is_null($channelCustomerNo)) {
            array_push($this->openAPINullablesSetToNull, 'channelCustomerNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channelCustomerNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($channelCustomerNo) && (mb_strlen($channelCustomerNo) > 50)) {
            throw new \InvalidArgumentException('invalid length for $channelCustomerNo when calling MerchantOrderResponse., must be smaller than or equal to 50.');
        }
        if (!is_null($channelCustomerNo) && (mb_strlen($channelCustomerNo) < 0)) {
            throw new \InvalidArgumentException('invalid length for $channelCustomerNo when calling MerchantOrderResponse., must be bigger than or equal to 0.');
        }

        $this->container['channelCustomerNo'] = $channelCustomerNo;

        return $this;
    }

    /**
     * Gets extraData
     *
     * @return array<string,string>|null
     */
    public function getExtraData()
    {
        return $this->container['extraData'];
    }

    /**
     * Sets extraData
     *
     * @param array<string,string>|null $extraData Extra data on the order.
     *
     * @return self
     */
    public function setExtraData($extraData)
    {
        if (is_null($extraData)) {
            array_push($this->openAPINullablesSetToNull, 'extraData');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('extraData', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['extraData'] = $extraData;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


