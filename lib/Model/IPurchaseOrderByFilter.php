<?php
/**
 * IPurchaseOrderByFilter
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FriendsOfCE\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.14.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FriendsOfCE\Merchant\ApiClient\Model;

use \ArrayAccess;
use \FriendsOfCE\Merchant\ApiClient\ObjectSerializer;

/**
 * IPurchaseOrderByFilter Class Doc Comment
 *
 * @category Class
 * @package  FriendsOfCE\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IPurchaseOrderByFilter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IPurchaseOrderByFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'channelId' => 'int',
        'channelName' => 'string',
        'globalChannelName' => 'string',
        'globalChannelId' => 'int',
        'channelPurchaseOrderNo' => 'string',
        'merchantPurchaseOrderNo' => 'string',
        'status' => '\FriendsOfCE\Merchant\ApiClient\Model\ModulesPurchaseOrderStatus',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'type' => '\FriendsOfCE\Merchant\ApiClient\Model\ModulesPurchaseOrderType',
        'fromShipDate' => '\DateTime',
        'toShipDate' => '\DateTime',
        'fromDeliveryDate' => '\DateTime',
        'toDeliveryDate' => '\DateTime',
        'importInformation' => '\FriendsOfCE\Merchant\ApiClient\Model\IImportInformation',
        'sellingParty' => '\FriendsOfCE\Merchant\ApiClient\Model\IVendorParty',
        'shipToParty' => '\FriendsOfCE\Merchant\ApiClient\Model\IVendorParty',
        'buyingParty' => '\FriendsOfCE\Merchant\ApiClient\Model\IVendorParty',
        'billingParty' => '\FriendsOfCE\Merchant\ApiClient\Model\IVendorParty',
        'lines' => '\FriendsOfCE\Merchant\ApiClient\Model\IPurchaseOrderLineByFilter[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'channelId' => 'int32',
        'channelName' => null,
        'globalChannelName' => null,
        'globalChannelId' => 'int32',
        'channelPurchaseOrderNo' => null,
        'merchantPurchaseOrderNo' => null,
        'status' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'type' => null,
        'fromShipDate' => 'date-time',
        'toShipDate' => 'date-time',
        'fromDeliveryDate' => 'date-time',
        'toDeliveryDate' => 'date-time',
        'importInformation' => null,
        'sellingParty' => null,
        'shipToParty' => null,
        'buyingParty' => null,
        'billingParty' => null,
        'lines' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'channelId' => false,
		'channelName' => true,
		'globalChannelName' => true,
		'globalChannelId' => true,
		'channelPurchaseOrderNo' => true,
		'merchantPurchaseOrderNo' => true,
		'status' => false,
		'createdAt' => true,
		'updatedAt' => true,
		'type' => false,
		'fromShipDate' => true,
		'toShipDate' => true,
		'fromDeliveryDate' => true,
		'toDeliveryDate' => true,
		'importInformation' => false,
		'sellingParty' => false,
		'shipToParty' => false,
		'buyingParty' => false,
		'billingParty' => false,
		'lines' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'channelId' => 'ChannelId',
        'channelName' => 'ChannelName',
        'globalChannelName' => 'GlobalChannelName',
        'globalChannelId' => 'GlobalChannelId',
        'channelPurchaseOrderNo' => 'ChannelPurchaseOrderNo',
        'merchantPurchaseOrderNo' => 'MerchantPurchaseOrderNo',
        'status' => 'Status',
        'createdAt' => 'CreatedAt',
        'updatedAt' => 'UpdatedAt',
        'type' => 'Type',
        'fromShipDate' => 'FromShipDate',
        'toShipDate' => 'ToShipDate',
        'fromDeliveryDate' => 'FromDeliveryDate',
        'toDeliveryDate' => 'ToDeliveryDate',
        'importInformation' => 'ImportInformation',
        'sellingParty' => 'SellingParty',
        'shipToParty' => 'ShipToParty',
        'buyingParty' => 'BuyingParty',
        'billingParty' => 'BillingParty',
        'lines' => 'Lines'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'channelId' => 'setChannelId',
        'channelName' => 'setChannelName',
        'globalChannelName' => 'setGlobalChannelName',
        'globalChannelId' => 'setGlobalChannelId',
        'channelPurchaseOrderNo' => 'setChannelPurchaseOrderNo',
        'merchantPurchaseOrderNo' => 'setMerchantPurchaseOrderNo',
        'status' => 'setStatus',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'type' => 'setType',
        'fromShipDate' => 'setFromShipDate',
        'toShipDate' => 'setToShipDate',
        'fromDeliveryDate' => 'setFromDeliveryDate',
        'toDeliveryDate' => 'setToDeliveryDate',
        'importInformation' => 'setImportInformation',
        'sellingParty' => 'setSellingParty',
        'shipToParty' => 'setShipToParty',
        'buyingParty' => 'setBuyingParty',
        'billingParty' => 'setBillingParty',
        'lines' => 'setLines'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'channelId' => 'getChannelId',
        'channelName' => 'getChannelName',
        'globalChannelName' => 'getGlobalChannelName',
        'globalChannelId' => 'getGlobalChannelId',
        'channelPurchaseOrderNo' => 'getChannelPurchaseOrderNo',
        'merchantPurchaseOrderNo' => 'getMerchantPurchaseOrderNo',
        'status' => 'getStatus',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'type' => 'getType',
        'fromShipDate' => 'getFromShipDate',
        'toShipDate' => 'getToShipDate',
        'fromDeliveryDate' => 'getFromDeliveryDate',
        'toDeliveryDate' => 'getToDeliveryDate',
        'importInformation' => 'getImportInformation',
        'sellingParty' => 'getSellingParty',
        'shipToParty' => 'getShipToParty',
        'buyingParty' => 'getBuyingParty',
        'billingParty' => 'getBillingParty',
        'lines' => 'getLines'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('channelId', $data ?? [], null);
        $this->setIfExists('channelName', $data ?? [], null);
        $this->setIfExists('globalChannelName', $data ?? [], null);
        $this->setIfExists('globalChannelId', $data ?? [], null);
        $this->setIfExists('channelPurchaseOrderNo', $data ?? [], null);
        $this->setIfExists('merchantPurchaseOrderNo', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('fromShipDate', $data ?? [], null);
        $this->setIfExists('toShipDate', $data ?? [], null);
        $this->setIfExists('fromDeliveryDate', $data ?? [], null);
        $this->setIfExists('toDeliveryDate', $data ?? [], null);
        $this->setIfExists('importInformation', $data ?? [], null);
        $this->setIfExists('sellingParty', $data ?? [], null);
        $this->setIfExists('shipToParty', $data ?? [], null);
        $this->setIfExists('buyingParty', $data ?? [], null);
        $this->setIfExists('billingParty', $data ?? [], null);
        $this->setIfExists('lines', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets channelId
     *
     * @return int|null
     */
    public function getChannelId()
    {
        return $this->container['channelId'];
    }

    /**
     * Sets channelId
     *
     * @param int|null $channelId channelId
     *
     * @return self
     */
    public function setChannelId($channelId)
    {
        if (is_null($channelId)) {
            throw new \InvalidArgumentException('non-nullable channelId cannot be null');
        }
        $this->container['channelId'] = $channelId;

        return $this;
    }

    /**
     * Gets channelName
     *
     * @return string|null
     */
    public function getChannelName()
    {
        return $this->container['channelName'];
    }

    /**
     * Sets channelName
     *
     * @param string|null $channelName channelName
     *
     * @return self
     */
    public function setChannelName($channelName)
    {
        if (is_null($channelName)) {
            array_push($this->openAPINullablesSetToNull, 'channelName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channelName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channelName'] = $channelName;

        return $this;
    }

    /**
     * Gets globalChannelName
     *
     * @return string|null
     */
    public function getGlobalChannelName()
    {
        return $this->container['globalChannelName'];
    }

    /**
     * Sets globalChannelName
     *
     * @param string|null $globalChannelName globalChannelName
     *
     * @return self
     */
    public function setGlobalChannelName($globalChannelName)
    {
        if (is_null($globalChannelName)) {
            array_push($this->openAPINullablesSetToNull, 'globalChannelName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('globalChannelName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['globalChannelName'] = $globalChannelName;

        return $this;
    }

    /**
     * Gets globalChannelId
     *
     * @return int|null
     */
    public function getGlobalChannelId()
    {
        return $this->container['globalChannelId'];
    }

    /**
     * Sets globalChannelId
     *
     * @param int|null $globalChannelId globalChannelId
     *
     * @return self
     */
    public function setGlobalChannelId($globalChannelId)
    {
        if (is_null($globalChannelId)) {
            array_push($this->openAPINullablesSetToNull, 'globalChannelId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('globalChannelId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['globalChannelId'] = $globalChannelId;

        return $this;
    }

    /**
     * Gets channelPurchaseOrderNo
     *
     * @return string|null
     */
    public function getChannelPurchaseOrderNo()
    {
        return $this->container['channelPurchaseOrderNo'];
    }

    /**
     * Sets channelPurchaseOrderNo
     *
     * @param string|null $channelPurchaseOrderNo channelPurchaseOrderNo
     *
     * @return self
     */
    public function setChannelPurchaseOrderNo($channelPurchaseOrderNo)
    {
        if (is_null($channelPurchaseOrderNo)) {
            array_push($this->openAPINullablesSetToNull, 'channelPurchaseOrderNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channelPurchaseOrderNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channelPurchaseOrderNo'] = $channelPurchaseOrderNo;

        return $this;
    }

    /**
     * Gets merchantPurchaseOrderNo
     *
     * @return string|null
     */
    public function getMerchantPurchaseOrderNo()
    {
        return $this->container['merchantPurchaseOrderNo'];
    }

    /**
     * Sets merchantPurchaseOrderNo
     *
     * @param string|null $merchantPurchaseOrderNo merchantPurchaseOrderNo
     *
     * @return self
     */
    public function setMerchantPurchaseOrderNo($merchantPurchaseOrderNo)
    {
        if (is_null($merchantPurchaseOrderNo)) {
            array_push($this->openAPINullablesSetToNull, 'merchantPurchaseOrderNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantPurchaseOrderNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchantPurchaseOrderNo'] = $merchantPurchaseOrderNo;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\ModulesPurchaseOrderStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\ModulesPurchaseOrderStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            array_push($this->openAPINullablesSetToNull, 'createdAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('createdAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            array_push($this->openAPINullablesSetToNull, 'updatedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updatedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\ModulesPurchaseOrderType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\ModulesPurchaseOrderType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets fromShipDate
     *
     * @return \DateTime|null
     */
    public function getFromShipDate()
    {
        return $this->container['fromShipDate'];
    }

    /**
     * Sets fromShipDate
     *
     * @param \DateTime|null $fromShipDate fromShipDate
     *
     * @return self
     */
    public function setFromShipDate($fromShipDate)
    {
        if (is_null($fromShipDate)) {
            array_push($this->openAPINullablesSetToNull, 'fromShipDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fromShipDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fromShipDate'] = $fromShipDate;

        return $this;
    }

    /**
     * Gets toShipDate
     *
     * @return \DateTime|null
     */
    public function getToShipDate()
    {
        return $this->container['toShipDate'];
    }

    /**
     * Sets toShipDate
     *
     * @param \DateTime|null $toShipDate toShipDate
     *
     * @return self
     */
    public function setToShipDate($toShipDate)
    {
        if (is_null($toShipDate)) {
            array_push($this->openAPINullablesSetToNull, 'toShipDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('toShipDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['toShipDate'] = $toShipDate;

        return $this;
    }

    /**
     * Gets fromDeliveryDate
     *
     * @return \DateTime|null
     */
    public function getFromDeliveryDate()
    {
        return $this->container['fromDeliveryDate'];
    }

    /**
     * Sets fromDeliveryDate
     *
     * @param \DateTime|null $fromDeliveryDate fromDeliveryDate
     *
     * @return self
     */
    public function setFromDeliveryDate($fromDeliveryDate)
    {
        if (is_null($fromDeliveryDate)) {
            array_push($this->openAPINullablesSetToNull, 'fromDeliveryDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fromDeliveryDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fromDeliveryDate'] = $fromDeliveryDate;

        return $this;
    }

    /**
     * Gets toDeliveryDate
     *
     * @return \DateTime|null
     */
    public function getToDeliveryDate()
    {
        return $this->container['toDeliveryDate'];
    }

    /**
     * Sets toDeliveryDate
     *
     * @param \DateTime|null $toDeliveryDate toDeliveryDate
     *
     * @return self
     */
    public function setToDeliveryDate($toDeliveryDate)
    {
        if (is_null($toDeliveryDate)) {
            array_push($this->openAPINullablesSetToNull, 'toDeliveryDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('toDeliveryDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['toDeliveryDate'] = $toDeliveryDate;

        return $this;
    }

    /**
     * Gets importInformation
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\IImportInformation|null
     */
    public function getImportInformation()
    {
        return $this->container['importInformation'];
    }

    /**
     * Sets importInformation
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\IImportInformation|null $importInformation importInformation
     *
     * @return self
     */
    public function setImportInformation($importInformation)
    {
        if (is_null($importInformation)) {
            throw new \InvalidArgumentException('non-nullable importInformation cannot be null');
        }
        $this->container['importInformation'] = $importInformation;

        return $this;
    }

    /**
     * Gets sellingParty
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\IVendorParty|null
     */
    public function getSellingParty()
    {
        return $this->container['sellingParty'];
    }

    /**
     * Sets sellingParty
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\IVendorParty|null $sellingParty sellingParty
     *
     * @return self
     */
    public function setSellingParty($sellingParty)
    {
        if (is_null($sellingParty)) {
            throw new \InvalidArgumentException('non-nullable sellingParty cannot be null');
        }
        $this->container['sellingParty'] = $sellingParty;

        return $this;
    }

    /**
     * Gets shipToParty
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\IVendorParty|null
     */
    public function getShipToParty()
    {
        return $this->container['shipToParty'];
    }

    /**
     * Sets shipToParty
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\IVendorParty|null $shipToParty shipToParty
     *
     * @return self
     */
    public function setShipToParty($shipToParty)
    {
        if (is_null($shipToParty)) {
            throw new \InvalidArgumentException('non-nullable shipToParty cannot be null');
        }
        $this->container['shipToParty'] = $shipToParty;

        return $this;
    }

    /**
     * Gets buyingParty
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\IVendorParty|null
     */
    public function getBuyingParty()
    {
        return $this->container['buyingParty'];
    }

    /**
     * Sets buyingParty
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\IVendorParty|null $buyingParty buyingParty
     *
     * @return self
     */
    public function setBuyingParty($buyingParty)
    {
        if (is_null($buyingParty)) {
            throw new \InvalidArgumentException('non-nullable buyingParty cannot be null');
        }
        $this->container['buyingParty'] = $buyingParty;

        return $this;
    }

    /**
     * Gets billingParty
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\IVendorParty|null
     */
    public function getBillingParty()
    {
        return $this->container['billingParty'];
    }

    /**
     * Sets billingParty
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\IVendorParty|null $billingParty billingParty
     *
     * @return self
     */
    public function setBillingParty($billingParty)
    {
        if (is_null($billingParty)) {
            throw new \InvalidArgumentException('non-nullable billingParty cannot be null');
        }
        $this->container['billingParty'] = $billingParty;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\IPurchaseOrderLineByFilter[]|null
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\IPurchaseOrderLineByFilter[]|null $lines lines
     *
     * @return self
     */
    public function setLines($lines)
    {
        if (is_null($lines)) {
            array_push($this->openAPINullablesSetToNull, 'lines');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lines', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lines'] = $lines;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


