<?php
/**
 * IReturnLine
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FriendsOfCE\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.15.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FriendsOfCE\Merchant\ApiClient\Model;

use \ArrayAccess;
use \FriendsOfCE\Merchant\ApiClient\ObjectSerializer;

/**
 * IReturnLine Class Doc Comment
 *
 * @category Class
 * @package  FriendsOfCE\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IReturnLine implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IReturnLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'returnId' => 'int',
        'orderLineId' => 'int',
        'merchantReturnLineNo' => 'string',
        'channelReturnLineNo' => 'string',
        'merchantOrderLineNo' => 'string',
        'channelOrderLineNo' => 'string',
        'quantity' => 'int',
        'handlingResults' => '\FriendsOfCE\Merchant\ApiClient\Model\IReturnLineHandlingResult[]',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'deletedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'returnId' => 'int32',
        'orderLineId' => 'int32',
        'merchantReturnLineNo' => null,
        'channelReturnLineNo' => null,
        'merchantOrderLineNo' => null,
        'channelOrderLineNo' => null,
        'quantity' => 'int32',
        'handlingResults' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'deletedAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'returnId' => false,
        'orderLineId' => false,
        'merchantReturnLineNo' => true,
        'channelReturnLineNo' => true,
        'merchantOrderLineNo' => true,
        'channelOrderLineNo' => true,
        'quantity' => false,
        'handlingResults' => true,
        'createdAt' => false,
        'updatedAt' => false,
        'deletedAt' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'returnId' => 'ReturnId',
        'orderLineId' => 'OrderLineId',
        'merchantReturnLineNo' => 'MerchantReturnLineNo',
        'channelReturnLineNo' => 'ChannelReturnLineNo',
        'merchantOrderLineNo' => 'MerchantOrderLineNo',
        'channelOrderLineNo' => 'ChannelOrderLineNo',
        'quantity' => 'Quantity',
        'handlingResults' => 'HandlingResults',
        'createdAt' => 'CreatedAt',
        'updatedAt' => 'UpdatedAt',
        'deletedAt' => 'DeletedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'returnId' => 'setReturnId',
        'orderLineId' => 'setOrderLineId',
        'merchantReturnLineNo' => 'setMerchantReturnLineNo',
        'channelReturnLineNo' => 'setChannelReturnLineNo',
        'merchantOrderLineNo' => 'setMerchantOrderLineNo',
        'channelOrderLineNo' => 'setChannelOrderLineNo',
        'quantity' => 'setQuantity',
        'handlingResults' => 'setHandlingResults',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'deletedAt' => 'setDeletedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'returnId' => 'getReturnId',
        'orderLineId' => 'getOrderLineId',
        'merchantReturnLineNo' => 'getMerchantReturnLineNo',
        'channelReturnLineNo' => 'getChannelReturnLineNo',
        'merchantOrderLineNo' => 'getMerchantOrderLineNo',
        'channelOrderLineNo' => 'getChannelOrderLineNo',
        'quantity' => 'getQuantity',
        'handlingResults' => 'getHandlingResults',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'deletedAt' => 'getDeletedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('returnId', $data ?? [], null);
        $this->setIfExists('orderLineId', $data ?? [], null);
        $this->setIfExists('merchantReturnLineNo', $data ?? [], null);
        $this->setIfExists('channelReturnLineNo', $data ?? [], null);
        $this->setIfExists('merchantOrderLineNo', $data ?? [], null);
        $this->setIfExists('channelOrderLineNo', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('handlingResults', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('deletedAt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets returnId
     *
     * @return int|null
     */
    public function getReturnId()
    {
        return $this->container['returnId'];
    }

    /**
     * Sets returnId
     *
     * @param int|null $returnId returnId
     *
     * @return self
     */
    public function setReturnId($returnId)
    {
        if (is_null($returnId)) {
            throw new \InvalidArgumentException('non-nullable returnId cannot be null');
        }
        $this->container['returnId'] = $returnId;

        return $this;
    }

    /**
     * Gets orderLineId
     *
     * @return int|null
     */
    public function getOrderLineId()
    {
        return $this->container['orderLineId'];
    }

    /**
     * Sets orderLineId
     *
     * @param int|null $orderLineId orderLineId
     *
     * @return self
     */
    public function setOrderLineId($orderLineId)
    {
        if (is_null($orderLineId)) {
            throw new \InvalidArgumentException('non-nullable orderLineId cannot be null');
        }
        $this->container['orderLineId'] = $orderLineId;

        return $this;
    }

    /**
     * Gets merchantReturnLineNo
     *
     * @return string|null
     */
    public function getMerchantReturnLineNo()
    {
        return $this->container['merchantReturnLineNo'];
    }

    /**
     * Sets merchantReturnLineNo
     *
     * @param string|null $merchantReturnLineNo merchantReturnLineNo
     *
     * @return self
     */
    public function setMerchantReturnLineNo($merchantReturnLineNo)
    {
        if (is_null($merchantReturnLineNo)) {
            array_push($this->openAPINullablesSetToNull, 'merchantReturnLineNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantReturnLineNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchantReturnLineNo'] = $merchantReturnLineNo;

        return $this;
    }

    /**
     * Gets channelReturnLineNo
     *
     * @return string|null
     */
    public function getChannelReturnLineNo()
    {
        return $this->container['channelReturnLineNo'];
    }

    /**
     * Sets channelReturnLineNo
     *
     * @param string|null $channelReturnLineNo channelReturnLineNo
     *
     * @return self
     */
    public function setChannelReturnLineNo($channelReturnLineNo)
    {
        if (is_null($channelReturnLineNo)) {
            array_push($this->openAPINullablesSetToNull, 'channelReturnLineNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channelReturnLineNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channelReturnLineNo'] = $channelReturnLineNo;

        return $this;
    }

    /**
     * Gets merchantOrderLineNo
     *
     * @return string|null
     */
    public function getMerchantOrderLineNo()
    {
        return $this->container['merchantOrderLineNo'];
    }

    /**
     * Sets merchantOrderLineNo
     *
     * @param string|null $merchantOrderLineNo merchantOrderLineNo
     *
     * @return self
     */
    public function setMerchantOrderLineNo($merchantOrderLineNo)
    {
        if (is_null($merchantOrderLineNo)) {
            array_push($this->openAPINullablesSetToNull, 'merchantOrderLineNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchantOrderLineNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchantOrderLineNo'] = $merchantOrderLineNo;

        return $this;
    }

    /**
     * Gets channelOrderLineNo
     *
     * @return string|null
     */
    public function getChannelOrderLineNo()
    {
        return $this->container['channelOrderLineNo'];
    }

    /**
     * Sets channelOrderLineNo
     *
     * @param string|null $channelOrderLineNo channelOrderLineNo
     *
     * @return self
     */
    public function setChannelOrderLineNo($channelOrderLineNo)
    {
        if (is_null($channelOrderLineNo)) {
            array_push($this->openAPINullablesSetToNull, 'channelOrderLineNo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channelOrderLineNo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channelOrderLineNo'] = $channelOrderLineNo;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets handlingResults
     *
     * @return \FriendsOfCE\Merchant\ApiClient\Model\IReturnLineHandlingResult[]|null
     */
    public function getHandlingResults()
    {
        return $this->container['handlingResults'];
    }

    /**
     * Sets handlingResults
     *
     * @param \FriendsOfCE\Merchant\ApiClient\Model\IReturnLineHandlingResult[]|null $handlingResults handlingResults
     *
     * @return self
     */
    public function setHandlingResults($handlingResults)
    {
        if (is_null($handlingResults)) {
            array_push($this->openAPINullablesSetToNull, 'handlingResults');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('handlingResults', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['handlingResults'] = $handlingResults;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            throw new \InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets deletedAt
     *
     * @return \DateTime|null
     */
    public function getDeletedAt()
    {
        return $this->container['deletedAt'];
    }

    /**
     * Sets deletedAt
     *
     * @param \DateTime|null $deletedAt deletedAt
     *
     * @return self
     */
    public function setDeletedAt($deletedAt)
    {
        if (is_null($deletedAt)) {
            array_push($this->openAPINullablesSetToNull, 'deletedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deletedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deletedAt'] = $deletedAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


